// Autogenerated from Pigeon (v4.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
import Flutter

/// Generated class from Pigeon.

private class CentralControllerHostApiCodecReader: FlutterStandardReader {
}
private class CentralControllerHostApiCodecWriter: FlutterStandardWriter {
}

private class CentralControllerHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CentralControllerHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CentralControllerHostApiCodecWriter(data: data)
  }
}

class CentralControllerHostApiCodec: FlutterStandardMessageCodec {
  static let shared = CentralControllerHostApiCodec(readerWriter: CentralControllerHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CentralControllerHostApi {
  func create(id: String)
  func getState(id: String) -> Int32
  func addStateObserver(id: String)
  func removeStateObserver(id: String)
  func startDiscovery(id: String, uuids: [String]?)
  func stopDiscovery(id: String)
  func destroy(id: String)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CentralControllerHostApiSetup {
  /// The codec used by CentralControllerHostApi.
  static var codec: FlutterStandardMessageCodec { CentralControllerHostApiCodec.shared }
  /// Sets up an instance of `CentralControllerHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CentralControllerHostApi?) {
    let createChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralControllerHostApi.create", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      createChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.create(id: idArg)
        reply(nil)
      }
    } else {
      createChannel.setMessageHandler(nil)
    }
    let getStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralControllerHostApi.getState", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getStateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let result = api.getState(id: idArg)
        reply(wrapResult(result))
      }
    } else {
      getStateChannel.setMessageHandler(nil)
    }
    let addStateObserverChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralControllerHostApi.addStateObserver", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addStateObserverChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.addStateObserver(id: idArg)
        reply(nil)
      }
    } else {
      addStateObserverChannel.setMessageHandler(nil)
    }
    let removeStateObserverChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralControllerHostApi.removeStateObserver", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeStateObserverChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.removeStateObserver(id: idArg)
        reply(nil)
      }
    } else {
      removeStateObserverChannel.setMessageHandler(nil)
    }
    let startDiscoveryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralControllerHostApi.startDiscovery", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startDiscoveryChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let uuidsArg = args[1] as? [String]
        api.startDiscovery(id: idArg, uuids: uuidsArg)
        reply(nil)
      }
    } else {
      startDiscoveryChannel.setMessageHandler(nil)
    }
    let stopDiscoveryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralControllerHostApi.stopDiscovery", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopDiscoveryChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.stopDiscovery(id: idArg)
        reply(nil)
      }
    } else {
      stopDiscoveryChannel.setMessageHandler(nil)
    }
    let destroyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralControllerHostApi.destroy", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      destroyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.destroy(id: idArg)
        reply(nil)
      }
    } else {
      destroyChannel.setMessageHandler(nil)
    }
  }
}
private class CentralControllerFlutterApiCodecReader: FlutterStandardReader {
}
private class CentralControllerFlutterApiCodecWriter: FlutterStandardWriter {
}

private class CentralControllerFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CentralControllerFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CentralControllerFlutterApiCodecWriter(data: data)
  }
}

class CentralControllerFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = CentralControllerFlutterApiCodec(readerWriter: CentralControllerFlutterApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class CentralControllerFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return CentralControllerFlutterApiCodec.shared
  }
  func notifyState(id idArg: String, state stateArg: Int32, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralControllerFlutterApi.notifyState", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg, stateArg]) { _ in
      completion()
    }
  }
  func notifyAdvertisement(id idArg: String, advertisement advertisementArg: [UInt8], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralControllerFlutterApi.notifyAdvertisement", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg, advertisementArg]) { _ in
      completion()
    }
  }
}
private class PeripheralHostApiCodecReader: FlutterStandardReader {
}
private class PeripheralHostApiCodecWriter: FlutterStandardWriter {
}

private class PeripheralHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PeripheralHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PeripheralHostApiCodecWriter(data: data)
  }
}

class PeripheralHostApiCodec: FlutterStandardMessageCodec {
  static let shared = PeripheralHostApiCodec(readerWriter: PeripheralHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PeripheralHostApi {
  func connect(id: String, completion: @escaping () -> Void)
  func disconnect(id: String, completion: @escaping () -> Void)
  func discoverServices(id: String, completion: @escaping ([[UInt8]]) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PeripheralHostApiSetup {
  /// The codec used by PeripheralHostApi.
  static var codec: FlutterStandardMessageCodec { PeripheralHostApiCodec.shared }
  /// Sets up an instance of `PeripheralHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PeripheralHostApi?) {
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PeripheralHostApi.connect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.connect(id: idArg) {
          reply(nil)
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PeripheralHostApi.disconnect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.disconnect(id: idArg) {
          reply(nil)
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let discoverServicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PeripheralHostApi.discoverServices", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverServicesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.discoverServices(id: idArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      discoverServicesChannel.setMessageHandler(nil)
    }
  }
}
private class PeripheralFlutterApiCodecReader: FlutterStandardReader {
}
private class PeripheralFlutterApiCodecWriter: FlutterStandardWriter {
}

private class PeripheralFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PeripheralFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PeripheralFlutterApiCodecWriter(data: data)
  }
}

class PeripheralFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = PeripheralFlutterApiCodec(readerWriter: PeripheralFlutterApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class PeripheralFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return PeripheralFlutterApiCodec.shared
  }
  func notifyConnectionLost(id idArg: String, errorMessage errorMessageArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PeripheralFlutterApi.notifyConnectionLost", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg, errorMessageArg]) { _ in
      completion()
    }
  }
}
private class GattServiceHostApiCodecReader: FlutterStandardReader {
}
private class GattServiceHostApiCodecWriter: FlutterStandardWriter {
}

private class GattServiceHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GattServiceHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GattServiceHostApiCodecWriter(data: data)
  }
}

class GattServiceHostApiCodec: FlutterStandardMessageCodec {
  static let shared = GattServiceHostApiCodec(readerWriter: GattServiceHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GattServiceHostApi {
  func discoverCharacteristics(id: String, completion: @escaping ([[UInt8]]) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GattServiceHostApiSetup {
  /// The codec used by GattServiceHostApi.
  static var codec: FlutterStandardMessageCodec { GattServiceHostApiCodec.shared }
  /// Sets up an instance of `GattServiceHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GattServiceHostApi?) {
    let discoverCharacteristicsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattServiceHostApi.discoverCharacteristics", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverCharacteristicsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.discoverCharacteristics(id: idArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      discoverCharacteristicsChannel.setMessageHandler(nil)
    }
  }
}
private class GattCharacteristicHostApiCodecReader: FlutterStandardReader {
}
private class GattCharacteristicHostApiCodecWriter: FlutterStandardWriter {
}

private class GattCharacteristicHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GattCharacteristicHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GattCharacteristicHostApiCodecWriter(data: data)
  }
}

class GattCharacteristicHostApiCodec: FlutterStandardMessageCodec {
  static let shared = GattCharacteristicHostApiCodec(readerWriter: GattCharacteristicHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GattCharacteristicHostApi {
  func discoverDescriptors(id: String, completion: @escaping ([[UInt8]]) -> Void)
  func read(id: String, completion: @escaping ([UInt8]) -> Void)
  func write(id: String, value: [UInt8], completion: @escaping () -> Void)
  func setNotify(id: String, value: Bool, completion: @escaping () -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GattCharacteristicHostApiSetup {
  /// The codec used by GattCharacteristicHostApi.
  static var codec: FlutterStandardMessageCodec { GattCharacteristicHostApiCodec.shared }
  /// Sets up an instance of `GattCharacteristicHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GattCharacteristicHostApi?) {
    let discoverDescriptorsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicHostApi.discoverDescriptors", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverDescriptorsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.discoverDescriptors(id: idArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      discoverDescriptorsChannel.setMessageHandler(nil)
    }
    let readChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicHostApi.read", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      readChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.read(id: idArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      readChannel.setMessageHandler(nil)
    }
    let writeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicHostApi.write", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let valueArg = args[1] as! [UInt8]
        api.write(id: idArg, value: valueArg) {
          reply(nil)
        }
      }
    } else {
      writeChannel.setMessageHandler(nil)
    }
    let setNotifyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicHostApi.setNotify", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setNotifyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let valueArg = args[1] as! Bool
        api.setNotify(id: idArg, value: valueArg) {
          reply(nil)
        }
      }
    } else {
      setNotifyChannel.setMessageHandler(nil)
    }
  }
}
private class GattCharacteristicFlutterApiCodecReader: FlutterStandardReader {
}
private class GattCharacteristicFlutterApiCodecWriter: FlutterStandardWriter {
}

private class GattCharacteristicFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GattCharacteristicFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GattCharacteristicFlutterApiCodecWriter(data: data)
  }
}

class GattCharacteristicFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = GattCharacteristicFlutterApiCodec(readerWriter: GattCharacteristicFlutterApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class GattCharacteristicFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return GattCharacteristicFlutterApiCodec.shared
  }
  func notifyValue(id idArg: String, value valueArg: [UInt8], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicFlutterApi.notifyValue", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg, valueArg]) { _ in
      completion()
    }
  }
}
private class GattDescriptorHostApiCodecReader: FlutterStandardReader {
}
private class GattDescriptorHostApiCodecWriter: FlutterStandardWriter {
}

private class GattDescriptorHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GattDescriptorHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GattDescriptorHostApiCodecWriter(data: data)
  }
}

class GattDescriptorHostApiCodec: FlutterStandardMessageCodec {
  static let shared = GattDescriptorHostApiCodec(readerWriter: GattDescriptorHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GattDescriptorHostApi {
  func read(id: String, completion: @escaping ([UInt8]) -> Void)
  func write(id: String, value: [UInt8], completion: @escaping () -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GattDescriptorHostApiSetup {
  /// The codec used by GattDescriptorHostApi.
  static var codec: FlutterStandardMessageCodec { GattDescriptorHostApiCodec.shared }
  /// Sets up an instance of `GattDescriptorHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GattDescriptorHostApi?) {
    let readChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattDescriptorHostApi.read", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      readChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.read(id: idArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      readChannel.setMessageHandler(nil)
    }
    let writeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattDescriptorHostApi.write", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let valueArg = args[1] as! [UInt8]
        api.write(id: idArg, value: valueArg) {
          reply(nil)
        }
      }
    } else {
      writeChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
