// Autogenerated from Pigeon (v4.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
import Flutter

/// Generated class from Pigeon.

private class CentralManagerHostApiCodecReader: FlutterStandardReader {
}
private class CentralManagerHostApiCodecWriter: FlutterStandardWriter {
}

private class CentralManagerHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CentralManagerHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CentralManagerHostApiCodecWriter(data: data)
  }
}

class CentralManagerHostApiCodec: FlutterStandardMessageCodec {
  static let shared = CentralManagerHostApiCodec(readerWriter: CentralManagerHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CentralManagerHostApi {
  func getState() -> [UInt8]
  func addStateObserver()
  func removeStateObserver()
  func startScan(uuids: [String]?, completion: @escaping () -> Void)
  func stopScan()
  func connect(uuid: String, completion: @escaping ([UInt8]) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CentralManagerHostApiSetup {
  /// The codec used by CentralManagerHostApi.
  static var codec: FlutterStandardMessageCodec { CentralManagerHostApiCodec.shared }
  /// Sets up an instance of `CentralManagerHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CentralManagerHostApi?) {
    let getStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralManagerHostApi.getState", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getStateChannel.setMessageHandler { _, reply in
        let result = api.getState()
        reply(wrapResult(result))
      }
    } else {
      getStateChannel.setMessageHandler(nil)
    }
    let addStateObserverChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralManagerHostApi.addStateObserver", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addStateObserverChannel.setMessageHandler { _, reply in
        api.addStateObserver()
        reply(nil)
      }
    } else {
      addStateObserverChannel.setMessageHandler(nil)
    }
    let removeStateObserverChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralManagerHostApi.removeStateObserver", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeStateObserverChannel.setMessageHandler { _, reply in
        api.removeStateObserver()
        reply(nil)
      }
    } else {
      removeStateObserverChannel.setMessageHandler(nil)
    }
    let startScanChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralManagerHostApi.startScan", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startScanChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidsArg = args[0] as? [String]
        api.startScan(uuids: uuidsArg) {
          reply(nil)
        }
      }
    } else {
      startScanChannel.setMessageHandler(nil)
    }
    let stopScanChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralManagerHostApi.stopScan", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopScanChannel.setMessageHandler { _, reply in
        api.stopScan()
        reply(nil)
      }
    } else {
      stopScanChannel.setMessageHandler(nil)
    }
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralManagerHostApi.connect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArg = args[0] as! String
        api.connect(uuid: uuidArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
  }
}
private class CentralManagerFlutterApiCodecReader: FlutterStandardReader {
}
private class CentralManagerFlutterApiCodecWriter: FlutterStandardWriter {
}

private class CentralManagerFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return CentralManagerFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return CentralManagerFlutterApiCodecWriter(data: data)
  }
}

class CentralManagerFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = CentralManagerFlutterApiCodec(readerWriter: CentralManagerFlutterApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class CentralManagerFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return CentralManagerFlutterApiCodec.shared
  }
  func notifyState(state stateArg: [UInt8], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralManagerFlutterApi.notifyState", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stateArg]) { _ in
      completion()
    }
  }
  func notifyAdvertisement(advertisement advertisementArg: [UInt8], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.CentralManagerFlutterApi.notifyAdvertisement", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([advertisementArg]) { _ in
      completion()
    }
  }
}
private class PeripheralHostApiCodecReader: FlutterStandardReader {
}
private class PeripheralHostApiCodecWriter: FlutterStandardWriter {
}

private class PeripheralHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PeripheralHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PeripheralHostApiCodecWriter(data: data)
  }
}

class PeripheralHostApiCodec: FlutterStandardMessageCodec {
  static let shared = PeripheralHostApiCodec(readerWriter: PeripheralHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PeripheralHostApi {
  func allocate(newId: String, oldId: String)
  func free(id: String)
  func disconnect(id: String, completion: @escaping () -> Void)
  func discoverServices(id: String, completion: @escaping ([[UInt8]]) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PeripheralHostApiSetup {
  /// The codec used by PeripheralHostApi.
  static var codec: FlutterStandardMessageCodec { PeripheralHostApiCodec.shared }
  /// Sets up an instance of `PeripheralHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PeripheralHostApi?) {
    let allocateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PeripheralHostApi.allocate", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      allocateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let newIdArg = args[0] as! String
        let oldIdArg = args[1] as! String
        api.allocate(newId: newIdArg, oldId: oldIdArg)
        reply(nil)
      }
    } else {
      allocateChannel.setMessageHandler(nil)
    }
    let freeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PeripheralHostApi.free", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      freeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.free(id: idArg)
        reply(nil)
      }
    } else {
      freeChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PeripheralHostApi.disconnect", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.disconnect(id: idArg) {
          reply(nil)
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let discoverServicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PeripheralHostApi.discoverServices", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverServicesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.discoverServices(id: idArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      discoverServicesChannel.setMessageHandler(nil)
    }
  }
}
private class PeripheralFlutterApiCodecReader: FlutterStandardReader {
}
private class PeripheralFlutterApiCodecWriter: FlutterStandardWriter {
}

private class PeripheralFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PeripheralFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PeripheralFlutterApiCodecWriter(data: data)
  }
}

class PeripheralFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = PeripheralFlutterApiCodec(readerWriter: PeripheralFlutterApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class PeripheralFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return PeripheralFlutterApiCodec.shared
  }
  func notifyConnectionLost(id idArg: String, error errorArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PeripheralFlutterApi.notifyConnectionLost", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg, errorArg]) { _ in
      completion()
    }
  }
}
private class GattServiceHostApiCodecReader: FlutterStandardReader {
}
private class GattServiceHostApiCodecWriter: FlutterStandardWriter {
}

private class GattServiceHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GattServiceHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GattServiceHostApiCodecWriter(data: data)
  }
}

class GattServiceHostApiCodec: FlutterStandardMessageCodec {
  static let shared = GattServiceHostApiCodec(readerWriter: GattServiceHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GattServiceHostApi {
  func allocate(newId: String, oldId: String)
  func free(id: String)
  func discoverCharacteristics(id: String, completion: @escaping ([[UInt8]]) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GattServiceHostApiSetup {
  /// The codec used by GattServiceHostApi.
  static var codec: FlutterStandardMessageCodec { GattServiceHostApiCodec.shared }
  /// Sets up an instance of `GattServiceHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GattServiceHostApi?) {
    let allocateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattServiceHostApi.allocate", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      allocateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let newIdArg = args[0] as! String
        let oldIdArg = args[1] as! String
        api.allocate(newId: newIdArg, oldId: oldIdArg)
        reply(nil)
      }
    } else {
      allocateChannel.setMessageHandler(nil)
    }
    let freeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattServiceHostApi.free", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      freeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.free(id: idArg)
        reply(nil)
      }
    } else {
      freeChannel.setMessageHandler(nil)
    }
    let discoverCharacteristicsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattServiceHostApi.discoverCharacteristics", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverCharacteristicsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.discoverCharacteristics(id: idArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      discoverCharacteristicsChannel.setMessageHandler(nil)
    }
  }
}
private class GattCharacteristicHostApiCodecReader: FlutterStandardReader {
}
private class GattCharacteristicHostApiCodecWriter: FlutterStandardWriter {
}

private class GattCharacteristicHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GattCharacteristicHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GattCharacteristicHostApiCodecWriter(data: data)
  }
}

class GattCharacteristicHostApiCodec: FlutterStandardMessageCodec {
  static let shared = GattCharacteristicHostApiCodec(readerWriter: GattCharacteristicHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GattCharacteristicHostApi {
  func allocate(newId: String, oldId: String)
  func free(id: String)
  func discoverDescriptors(id: String, completion: @escaping ([[UInt8]]) -> Void)
  func read(id: String, completion: @escaping ([UInt8]) -> Void)
  func write(id: String, value: [UInt8], completion: @escaping () -> Void)
  func setNotify(id: String, value: Bool, completion: @escaping () -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GattCharacteristicHostApiSetup {
  /// The codec used by GattCharacteristicHostApi.
  static var codec: FlutterStandardMessageCodec { GattCharacteristicHostApiCodec.shared }
  /// Sets up an instance of `GattCharacteristicHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GattCharacteristicHostApi?) {
    let allocateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicHostApi.allocate", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      allocateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let newIdArg = args[0] as! String
        let oldIdArg = args[1] as! String
        api.allocate(newId: newIdArg, oldId: oldIdArg)
        reply(nil)
      }
    } else {
      allocateChannel.setMessageHandler(nil)
    }
    let freeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicHostApi.free", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      freeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.free(id: idArg)
        reply(nil)
      }
    } else {
      freeChannel.setMessageHandler(nil)
    }
    let discoverDescriptorsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicHostApi.discoverDescriptors", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverDescriptorsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.discoverDescriptors(id: idArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      discoverDescriptorsChannel.setMessageHandler(nil)
    }
    let readChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicHostApi.read", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      readChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.read(id: idArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      readChannel.setMessageHandler(nil)
    }
    let writeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicHostApi.write", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let valueArg = args[1] as! [UInt8]
        api.write(id: idArg, value: valueArg) {
          reply(nil)
        }
      }
    } else {
      writeChannel.setMessageHandler(nil)
    }
    let setNotifyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicHostApi.setNotify", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setNotifyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let valueArg = args[1] as! Bool
        api.setNotify(id: idArg, value: valueArg) {
          reply(nil)
        }
      }
    } else {
      setNotifyChannel.setMessageHandler(nil)
    }
  }
}
private class GattCharacteristicFlutterApiCodecReader: FlutterStandardReader {
}
private class GattCharacteristicFlutterApiCodecWriter: FlutterStandardWriter {
}

private class GattCharacteristicFlutterApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GattCharacteristicFlutterApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GattCharacteristicFlutterApiCodecWriter(data: data)
  }
}

class GattCharacteristicFlutterApiCodec: FlutterStandardMessageCodec {
  static let shared = GattCharacteristicFlutterApiCodec(readerWriter: GattCharacteristicFlutterApiCodecReaderWriter())
}

/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class GattCharacteristicFlutterApi {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return GattCharacteristicFlutterApiCodec.shared
  }
  func notifyValue(id idArg: String, value valueArg: [UInt8], completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattCharacteristicFlutterApi.notifyValue", binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([idArg, valueArg]) { _ in
      completion()
    }
  }
}
private class GattDescriptorHostApiCodecReader: FlutterStandardReader {
}
private class GattDescriptorHostApiCodecWriter: FlutterStandardWriter {
}

private class GattDescriptorHostApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return GattDescriptorHostApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return GattDescriptorHostApiCodecWriter(data: data)
  }
}

class GattDescriptorHostApiCodec: FlutterStandardMessageCodec {
  static let shared = GattDescriptorHostApiCodec(readerWriter: GattDescriptorHostApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol GattDescriptorHostApi {
  func allocate(newId: String, oldId: String)
  func free(id: String)
  func read(id: String, completion: @escaping ([UInt8]) -> Void)
  func write(id: String, value: [UInt8], completion: @escaping () -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class GattDescriptorHostApiSetup {
  /// The codec used by GattDescriptorHostApi.
  static var codec: FlutterStandardMessageCodec { GattDescriptorHostApiCodec.shared }
  /// Sets up an instance of `GattDescriptorHostApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: GattDescriptorHostApi?) {
    let allocateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattDescriptorHostApi.allocate", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      allocateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let newIdArg = args[0] as! String
        let oldIdArg = args[1] as! String
        api.allocate(newId: newIdArg, oldId: oldIdArg)
        reply(nil)
      }
    } else {
      allocateChannel.setMessageHandler(nil)
    }
    let freeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattDescriptorHostApi.free", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      freeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.free(id: idArg)
        reply(nil)
      }
    } else {
      freeChannel.setMessageHandler(nil)
    }
    let readChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattDescriptorHostApi.read", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      readChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        api.read(id: idArg) { result in
          reply(wrapResult(result))
        }
      }
    } else {
      readChannel.setMessageHandler(nil)
    }
    let writeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.GattDescriptorHostApi.write", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        let valueArg = args[1] as! [UInt8]
        api.write(id: idArg, value: valueArg) {
          reply(nil)
        }
      }
    } else {
      writeChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
