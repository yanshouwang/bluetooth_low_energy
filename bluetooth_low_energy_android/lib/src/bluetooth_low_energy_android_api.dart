// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum CentralManagerStateArgs {
  unknown,
  unsupported,
  unauthorized,
  poweredOff,
  poweredOn,
}

enum PeripheralStateArgs {
  disconnected,
  connecting,
  connected,
}

enum GattCharacteristicWriteTypeArgs {
  withResponse,
  withoutResponse,
}

class PeripheralArgs {
  PeripheralArgs({
    required this.id,
    required this.name,
    required this.rssi,
    this.manufacturerSpecificData,
  });

  String id;

  String name;

  int rssi;

  Uint8List? manufacturerSpecificData;

  Object encode() {
    return <Object?>[
      id,
      name,
      rssi,
      manufacturerSpecificData,
    ];
  }

  static PeripheralArgs decode(Object result) {
    result as List<Object?>;
    return PeripheralArgs(
      id: result[0]! as String,
      name: result[1]! as String,
      rssi: result[2]! as int,
      manufacturerSpecificData: result[3] as Uint8List?,
    );
  }
}

class GattServiceArgs {
  GattServiceArgs({
    required this.id,
    required this.characteristicArgs,
  });

  String id;

  List<GattCharacteristicArgs?> characteristicArgs;

  Object encode() {
    return <Object?>[
      id,
      characteristicArgs,
    ];
  }

  static GattServiceArgs decode(Object result) {
    result as List<Object?>;
    return GattServiceArgs(
      id: result[0]! as String,
      characteristicArgs: (result[1] as List<Object?>?)!.cast<GattCharacteristicArgs?>(),
    );
  }
}

class GattCharacteristicArgs {
  GattCharacteristicArgs({
    required this.id,
    required this.canRead,
    required this.canWrite,
    required this.canWriteWithoutResponse,
    required this.canNotify,
    required this.descriptorArgs,
  });

  String id;

  bool canRead;

  bool canWrite;

  bool canWriteWithoutResponse;

  bool canNotify;

  List<GattDescriptorArgs?> descriptorArgs;

  Object encode() {
    return <Object?>[
      id,
      canRead,
      canWrite,
      canWriteWithoutResponse,
      canNotify,
      descriptorArgs,
    ];
  }

  static GattCharacteristicArgs decode(Object result) {
    result as List<Object?>;
    return GattCharacteristicArgs(
      id: result[0]! as String,
      canRead: result[1]! as bool,
      canWrite: result[2]! as bool,
      canWriteWithoutResponse: result[3]! as bool,
      canNotify: result[4]! as bool,
      descriptorArgs: (result[5] as List<Object?>?)!.cast<GattDescriptorArgs?>(),
    );
  }
}

class GattDescriptorArgs {
  GattDescriptorArgs({
    required this.id,
  });

  String id;

  Object encode() {
    return <Object?>[
      id,
    ];
  }

  static GattDescriptorArgs decode(Object result) {
    result as List<Object?>;
    return GattDescriptorArgs(
      id: result[0]! as String,
    );
  }
}

class CentralManagerStateEventArgs {
  CentralManagerStateEventArgs({
    required this.stateArgs,
  });

  CentralManagerStateArgs stateArgs;

  Object encode() {
    return <Object?>[
      stateArgs.index,
    ];
  }

  static CentralManagerStateEventArgs decode(Object result) {
    result as List<Object?>;
    return CentralManagerStateEventArgs(
      stateArgs: CentralManagerStateArgs.values[result[0]! as int],
    );
  }
}

class PeripheralEventArgs {
  PeripheralEventArgs({
    required this.peripheralArgs,
  });

  PeripheralArgs peripheralArgs;

  Object encode() {
    return <Object?>[
      peripheralArgs.encode(),
    ];
  }

  static PeripheralEventArgs decode(Object result) {
    result as List<Object?>;
    return PeripheralEventArgs(
      peripheralArgs: PeripheralArgs.decode(result[0]! as List<Object?>),
    );
  }
}

class PeripheralStateEventArgs {
  PeripheralStateEventArgs({
    required this.id,
    required this.stateArgs,
  });

  String id;

  PeripheralStateArgs stateArgs;

  Object encode() {
    return <Object?>[
      id,
      stateArgs.index,
    ];
  }

  static PeripheralStateEventArgs decode(Object result) {
    result as List<Object?>;
    return PeripheralStateEventArgs(
      id: result[0]! as String,
      stateArgs: PeripheralStateArgs.values[result[1]! as int],
    );
  }
}

class GattCharacteristicValueEventArgs {
  GattCharacteristicValueEventArgs({
    required this.id,
    required this.serviceId,
    required this.characteristicId,
    required this.value,
  });

  String id;

  String serviceId;

  String characteristicId;

  Uint8List value;

  Object encode() {
    return <Object?>[
      id,
      serviceId,
      characteristicId,
      value,
    ];
  }

  static GattCharacteristicValueEventArgs decode(Object result) {
    result as List<Object?>;
    return GattCharacteristicValueEventArgs(
      id: result[0]! as String,
      serviceId: result[1]! as String,
      characteristicId: result[2]! as String,
      value: result[3]! as Uint8List,
    );
  }
}

class _CentralManagerHostApiCodec extends StandardMessageCodec {
  const _CentralManagerHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is GattCharacteristicArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is GattDescriptorArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is GattServiceArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return GattCharacteristicArgs.decode(readValue(buffer)!);
      case 129: 
        return GattDescriptorArgs.decode(readValue(buffer)!);
      case 130: 
        return GattServiceArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class CentralManagerHostApi {
  /// Constructor for [CentralManagerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CentralManagerHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _CentralManagerHostApiCodec();

  Future<void> initialize() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CentralManagerHostApi.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startScan() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CentralManagerHostApi.startScan', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopScan() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CentralManagerHostApi.stopScan', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> connect(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CentralManagerHostApi.connect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CentralManagerHostApi.disconnect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<GattServiceArgs> discoverService(String arg_id, String arg_serviceId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CentralManagerHostApi.discoverService', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_serviceId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as GattServiceArgs?)!;
    }
  }

  Future<Uint8List> read(String arg_id, String arg_serviceId, String arg_characteristicId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CentralManagerHostApi.read', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_serviceId, arg_characteristicId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<void> write(String arg_id, String arg_serviceId, String arg_characteristicId, Uint8List arg_value, GattCharacteristicWriteTypeArgs arg_typeArgs) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CentralManagerHostApi.write', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_serviceId, arg_characteristicId, arg_value, arg_typeArgs.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> notify(String arg_id, String arg_serviceId, String arg_characteristicId, bool arg_value) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CentralManagerHostApi.notify', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_serviceId, arg_characteristicId, arg_value]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _CentralManagerFlutterApiCodec extends StandardMessageCodec {
  const _CentralManagerFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CentralManagerStateEventArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is GattCharacteristicValueEventArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PeripheralArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is PeripheralEventArgs) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is PeripheralStateEventArgs) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return CentralManagerStateEventArgs.decode(readValue(buffer)!);
      case 129: 
        return GattCharacteristicValueEventArgs.decode(readValue(buffer)!);
      case 130: 
        return PeripheralArgs.decode(readValue(buffer)!);
      case 131: 
        return PeripheralEventArgs.decode(readValue(buffer)!);
      case 132: 
        return PeripheralStateEventArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class CentralManagerFlutterApi {
  static const MessageCodec<Object?> codec = _CentralManagerFlutterApiCodec();

  void onStateChanged(CentralManagerStateEventArgs eventArgs);

  void onScanned(PeripheralEventArgs eventArgs);

  void onPeripheralStateChanged(PeripheralStateEventArgs eventArgs);

  void onCharacteristicValueChanged(GattCharacteristicValueEventArgs eventArgs);

  static void setup(CentralManagerFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CentralManagerFlutterApi.onStateChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.CentralManagerFlutterApi.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CentralManagerStateEventArgs? arg_eventArgs = (args[0] as CentralManagerStateEventArgs?);
          assert(arg_eventArgs != null,
              'Argument for dev.flutter.pigeon.CentralManagerFlutterApi.onStateChanged was null, expected non-null CentralManagerStateEventArgs.');
          api.onStateChanged(arg_eventArgs!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CentralManagerFlutterApi.onScanned', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.CentralManagerFlutterApi.onScanned was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PeripheralEventArgs? arg_eventArgs = (args[0] as PeripheralEventArgs?);
          assert(arg_eventArgs != null,
              'Argument for dev.flutter.pigeon.CentralManagerFlutterApi.onScanned was null, expected non-null PeripheralEventArgs.');
          api.onScanned(arg_eventArgs!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CentralManagerFlutterApi.onPeripheralStateChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.CentralManagerFlutterApi.onPeripheralStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PeripheralStateEventArgs? arg_eventArgs = (args[0] as PeripheralStateEventArgs?);
          assert(arg_eventArgs != null,
              'Argument for dev.flutter.pigeon.CentralManagerFlutterApi.onPeripheralStateChanged was null, expected non-null PeripheralStateEventArgs.');
          api.onPeripheralStateChanged(arg_eventArgs!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CentralManagerFlutterApi.onCharacteristicValueChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.CentralManagerFlutterApi.onCharacteristicValueChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final GattCharacteristicValueEventArgs? arg_eventArgs = (args[0] as GattCharacteristicValueEventArgs?);
          assert(arg_eventArgs != null,
              'Argument for dev.flutter.pigeon.CentralManagerFlutterApi.onCharacteristicValueChanged was null, expected non-null GattCharacteristicValueEventArgs.');
          api.onCharacteristicValueChanged(arg_eventArgs!);
          return;
        });
      }
    }
  }
}
