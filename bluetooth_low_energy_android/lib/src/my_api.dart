// Autogenerated from Pigeon (v10.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum MyCentralManagerState {
  unknown,
  unsupported,
  unauthorized,
  poweredOff,
  poweredOn,
}

enum MyPeripheralState {
  disconnected,
  connecting,
  connected,
}

enum MyGattCharacteristicWriteType {
  withResponse,
  withoutResponse,
}

class MyPeripheral {
  MyPeripheral({
    required this.id,
    required this.name,
    required this.rssi,
    this.manufacturerSpecificData,
  });

  String id;

  String name;

  int rssi;

  Uint8List? manufacturerSpecificData;

  Object encode() {
    return <Object?>[
      id,
      name,
      rssi,
      manufacturerSpecificData,
    ];
  }

  static MyPeripheral decode(Object result) {
    result as List<Object?>;
    return MyPeripheral(
      id: result[0]! as String,
      name: result[1]! as String,
      rssi: result[2]! as int,
      manufacturerSpecificData: result[3] as Uint8List?,
    );
  }
}

class MyGattService {
  MyGattService({
    required this.id,
    required this.characteristics,
  });

  String id;

  List<MyGattCharacteristic?> characteristics;

  Object encode() {
    return <Object?>[
      id,
      characteristics,
    ];
  }

  static MyGattService decode(Object result) {
    result as List<Object?>;
    return MyGattService(
      id: result[0]! as String,
      characteristics: (result[1] as List<Object?>?)!.cast<MyGattCharacteristic?>(),
    );
  }
}

class MyGattCharacteristic {
  MyGattCharacteristic({
    required this.id,
    required this.canRead,
    required this.canWrite,
    required this.canWriteWithoutResponse,
    required this.canNotify,
    required this.descriptors,
  });

  String id;

  bool canRead;

  bool canWrite;

  bool canWriteWithoutResponse;

  bool canNotify;

  List<MyGattDescriptor?> descriptors;

  Object encode() {
    return <Object?>[
      id,
      canRead,
      canWrite,
      canWriteWithoutResponse,
      canNotify,
      descriptors,
    ];
  }

  static MyGattCharacteristic decode(Object result) {
    result as List<Object?>;
    return MyGattCharacteristic(
      id: result[0]! as String,
      canRead: result[1]! as bool,
      canWrite: result[2]! as bool,
      canWriteWithoutResponse: result[3]! as bool,
      canNotify: result[4]! as bool,
      descriptors: (result[5] as List<Object?>?)!.cast<MyGattDescriptor?>(),
    );
  }
}

class MyGattDescriptor {
  MyGattDescriptor({
    required this.id,
  });

  String id;

  Object encode() {
    return <Object?>[
      id,
    ];
  }

  static MyGattDescriptor decode(Object result) {
    result as List<Object?>;
    return MyGattDescriptor(
      id: result[0]! as String,
    );
  }
}

class _MyCentralManagerHostApiCodec extends StandardMessageCodec {
  const _MyCentralManagerHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MyGattCharacteristic) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MyGattDescriptor) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MyGattService) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MyGattCharacteristic.decode(readValue(buffer)!);
      case 129: 
        return MyGattDescriptor.decode(readValue(buffer)!);
      case 130: 
        return MyGattService.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MyCentralManagerHostApi {
  /// Constructor for [MyCentralManagerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MyCentralManagerHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _MyCentralManagerHostApiCodec();

  Future<int> getState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralManagerHostApi.getState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<void> startDiscovery() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralManagerHostApi.startDiscovery', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopDiscovery() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralManagerHostApi.stopDiscovery', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> connect(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralManagerHostApi.connect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralManagerHostApi.disconnect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<MyGattService?>> discoverServices(String arg_id) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralManagerHostApi.discoverServices', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<MyGattService?>();
    }
  }

  Future<Uint8List> readCharacteristic(String arg_id, String arg_serviceId, String arg_characteristicId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralManagerHostApi.readCharacteristic', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_serviceId, arg_characteristicId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeCharacteristic(String arg_id, String arg_serviceId, String arg_characteristicId, Uint8List arg_value, int arg_type) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralManagerHostApi.writeCharacteristic', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_serviceId, arg_characteristicId, arg_value, arg_type]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> notifyCharacteristic(String arg_id, String arg_serviceId, String arg_characteristicId, bool arg_value) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralManagerHostApi.notifyCharacteristic', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_serviceId, arg_characteristicId, arg_value]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> readDescriptor(String arg_id, String arg_serviceId, String arg_characteristicId, String arg_descriptorId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralManagerHostApi.readDescriptor', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_serviceId, arg_characteristicId, arg_descriptorId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeDescriptor(String arg_id, String arg_serviceId, String arg_characteristicId, String arg_descriptorId, Uint8List arg_value) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralManagerHostApi.writeDescriptor', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_id, arg_serviceId, arg_characteristicId, arg_descriptorId, arg_value]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _MyCentralManagerFlutterApiCodec extends StandardMessageCodec {
  const _MyCentralManagerFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MyPeripheral) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MyPeripheral.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class MyCentralManagerFlutterApi {
  static const MessageCodec<Object?> codec = _MyCentralManagerFlutterApiCodec();

  void onStateChanged(int state);

  void onDiscovered(MyPeripheral peripheral);

  void onPeripheralStateChanged(String id, int state);

  void onCharacteristicValueChanged(String id, String serviceId, String characteristicId, Uint8List value);

  static void setup(MyCentralManagerFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyCentralManagerFlutterApi.onStateChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_state = (args[0] as int?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onStateChanged was null, expected non-null int.');
          api.onStateChanged(arg_state!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyCentralManagerFlutterApi.onDiscovered', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onDiscovered was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyPeripheral? arg_peripheral = (args[0] as MyPeripheral?);
          assert(arg_peripheral != null,
              'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onDiscovered was null, expected non-null MyPeripheral.');
          api.onDiscovered(arg_peripheral!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyCentralManagerFlutterApi.onPeripheralStateChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onPeripheralStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onPeripheralStateChanged was null, expected non-null String.');
          final int? arg_state = (args[1] as int?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onPeripheralStateChanged was null, expected non-null int.');
          api.onPeripheralStateChanged(arg_id!, arg_state!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyCentralManagerFlutterApi.onCharacteristicValueChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onCharacteristicValueChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_id = (args[0] as String?);
          assert(arg_id != null,
              'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onCharacteristicValueChanged was null, expected non-null String.');
          final String? arg_serviceId = (args[1] as String?);
          assert(arg_serviceId != null,
              'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onCharacteristicValueChanged was null, expected non-null String.');
          final String? arg_characteristicId = (args[2] as String?);
          assert(arg_characteristicId != null,
              'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onCharacteristicValueChanged was null, expected non-null String.');
          final Uint8List? arg_value = (args[3] as Uint8List?);
          assert(arg_value != null,
              'Argument for dev.flutter.pigeon.MyCentralManagerFlutterApi.onCharacteristicValueChanged was null, expected non-null Uint8List.');
          api.onCharacteristicValueChanged(arg_id!, arg_serviceId!, arg_characteristicId!, arg_value!);
          return;
        });
      }
    }
  }
}
