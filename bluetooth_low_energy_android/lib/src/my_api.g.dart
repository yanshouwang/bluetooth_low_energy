// Autogenerated from Pigeon (v10.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum MyCentralControllerStateArgs {
  unauthorized,
  poweredOff,
  poweredOn,
}

enum MyGattCharacteristicPropertyArgs {
  read,
  write,
  writeWithoutResponse,
  notify,
  indicate,
}

enum MyGattCharacteristicWriteTypeArgs {
  withResponse,
  withoutResponse,
}

class MyPeripheralArgs {
  MyPeripheralArgs({
    required this.hashCode,
    required this.uuidValue,
  });

  int hashCode;

  String uuidValue;

  Object encode() {
    return <Object?>[
      hashCode,
      uuidValue,
    ];
  }

  static MyPeripheralArgs decode(Object result) {
    result as List<Object?>;
    return MyPeripheralArgs(
      hashCode: result[0]! as int,
      uuidValue: result[1]! as String,
    );
  }
}

class MyAdvertisementArgs {
  MyAdvertisementArgs({
    this.name,
    this.manufacturerSpecificData,
  });

  String? name;

  Uint8List? manufacturerSpecificData;

  Object encode() {
    return <Object?>[
      name,
      manufacturerSpecificData,
    ];
  }

  static MyAdvertisementArgs decode(Object result) {
    result as List<Object?>;
    return MyAdvertisementArgs(
      name: result[0] as String?,
      manufacturerSpecificData: result[1] as Uint8List?,
    );
  }
}

class MyGattServiceArgs {
  MyGattServiceArgs({
    required this.hashCode,
    required this.uuidValue,
  });

  int hashCode;

  String uuidValue;

  Object encode() {
    return <Object?>[
      hashCode,
      uuidValue,
    ];
  }

  static MyGattServiceArgs decode(Object result) {
    result as List<Object?>;
    return MyGattServiceArgs(
      hashCode: result[0]! as int,
      uuidValue: result[1]! as String,
    );
  }
}

class MyGattCharacteristicArgs {
  MyGattCharacteristicArgs({
    required this.hashCode,
    required this.uuidValue,
    required this.propertyNumbers,
  });

  int hashCode;

  String uuidValue;

  List<int?> propertyNumbers;

  Object encode() {
    return <Object?>[
      hashCode,
      uuidValue,
      propertyNumbers,
    ];
  }

  static MyGattCharacteristicArgs decode(Object result) {
    result as List<Object?>;
    return MyGattCharacteristicArgs(
      hashCode: result[0]! as int,
      uuidValue: result[1]! as String,
      propertyNumbers: (result[2] as List<Object?>?)!.cast<int?>(),
    );
  }
}

class MyGattDescriptorArgs {
  MyGattDescriptorArgs({
    required this.hashCode,
    required this.uuidValue,
  });

  int hashCode;

  String uuidValue;

  Object encode() {
    return <Object?>[
      hashCode,
      uuidValue,
    ];
  }

  static MyGattDescriptorArgs decode(Object result) {
    result as List<Object?>;
    return MyGattDescriptorArgs(
      hashCode: result[0]! as int,
      uuidValue: result[1]! as String,
    );
  }
}

class _MyCentralControllerHostApiCodec extends StandardMessageCodec {
  const _MyCentralControllerHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MyGattCharacteristicArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MyGattDescriptorArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MyGattServiceArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MyGattCharacteristicArgs.decode(readValue(buffer)!);
      case 129: 
        return MyGattDescriptorArgs.decode(readValue(buffer)!);
      case 130: 
        return MyGattServiceArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MyCentralControllerHostApi {
  /// Constructor for [MyCentralControllerHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MyCentralControllerHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _MyCentralControllerHostApiCodec();

  Future<void> initialize() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> free(int arg_hashCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.free', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_hashCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> getState() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.getState', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<void> startDiscovery() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.startDiscovery', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopDiscovery() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.stopDiscovery', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> connect(int arg_peripheralHashCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.connect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_peripheralHashCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect(int arg_peripheralHashCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.disconnect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_peripheralHashCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> discoverGATT(int arg_peripheralHashCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.discoverGATT', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_peripheralHashCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<MyGattServiceArgs?>> getServices(int arg_peripheralHashCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.getServices', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_peripheralHashCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<MyGattServiceArgs?>();
    }
  }

  Future<List<MyGattCharacteristicArgs?>> getCharacteristics(int arg_serviceHashCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.getCharacteristics', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_serviceHashCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<MyGattCharacteristicArgs?>();
    }
  }

  Future<List<MyGattDescriptorArgs?>> getDescriptors(int arg_characteristicHashCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.getDescriptors', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_characteristicHashCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<MyGattDescriptorArgs?>();
    }
  }

  Future<Uint8List> readCharacteristic(int arg_characteristicHashCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.readCharacteristic', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_characteristicHashCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeCharacteristic(int arg_characteristicHashCode, Uint8List arg_value, int arg_typeNumber) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.writeCharacteristic', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_characteristicHashCode, arg_value, arg_typeNumber]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> notifyCharacteristic(int arg_characteristicHashCode, bool arg_state) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.notifyCharacteristic', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_characteristicHashCode, arg_state]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> readDescriptor(int arg_descriptorHashCode) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.readDescriptor', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_descriptorHashCode]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeDescriptor(int arg_descriptorHashCode, Uint8List arg_value) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.MyCentralControllerHostApi.writeDescriptor', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_descriptorHashCode, arg_value]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _MyCentralControllerFlutterApiCodec extends StandardMessageCodec {
  const _MyCentralControllerFlutterApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MyAdvertisementArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MyGattCharacteristicArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MyPeripheralArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MyAdvertisementArgs.decode(readValue(buffer)!);
      case 129: 
        return MyGattCharacteristicArgs.decode(readValue(buffer)!);
      case 130: 
        return MyPeripheralArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class MyCentralControllerFlutterApi {
  static const MessageCodec<Object?> codec = _MyCentralControllerFlutterApiCodec();

  void onStateChanged(int stateNumber);

  void onDiscovered(MyPeripheralArgs peripheralArgs, int rssi, MyAdvertisementArgs advertisementArgs);

  void onPeripheralStateChanged(MyPeripheralArgs peripheralArgs, bool state, String? errorMessage);

  void onCharacteristicValueChanged(MyGattCharacteristicArgs characteristicArgs, Uint8List value);

  static void setup(MyCentralControllerFlutterApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyCentralControllerFlutterApi.onStateChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_stateNumber = (args[0] as int?);
          assert(arg_stateNumber != null,
              'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onStateChanged was null, expected non-null int.');
          api.onStateChanged(arg_stateNumber!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyCentralControllerFlutterApi.onDiscovered', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onDiscovered was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyPeripheralArgs? arg_peripheralArgs = (args[0] as MyPeripheralArgs?);
          assert(arg_peripheralArgs != null,
              'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onDiscovered was null, expected non-null MyPeripheralArgs.');
          final int? arg_rssi = (args[1] as int?);
          assert(arg_rssi != null,
              'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onDiscovered was null, expected non-null int.');
          final MyAdvertisementArgs? arg_advertisementArgs = (args[2] as MyAdvertisementArgs?);
          assert(arg_advertisementArgs != null,
              'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onDiscovered was null, expected non-null MyAdvertisementArgs.');
          api.onDiscovered(arg_peripheralArgs!, arg_rssi!, arg_advertisementArgs!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyCentralControllerFlutterApi.onPeripheralStateChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onPeripheralStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyPeripheralArgs? arg_peripheralArgs = (args[0] as MyPeripheralArgs?);
          assert(arg_peripheralArgs != null,
              'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onPeripheralStateChanged was null, expected non-null MyPeripheralArgs.');
          final bool? arg_state = (args[1] as bool?);
          assert(arg_state != null,
              'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onPeripheralStateChanged was null, expected non-null bool.');
          final String? arg_errorMessage = (args[2] as String?);
          api.onPeripheralStateChanged(arg_peripheralArgs!, arg_state!, arg_errorMessage);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.MyCentralControllerFlutterApi.onCharacteristicValueChanged', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onCharacteristicValueChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyGattCharacteristicArgs? arg_characteristicArgs = (args[0] as MyGattCharacteristicArgs?);
          assert(arg_characteristicArgs != null,
              'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onCharacteristicValueChanged was null, expected non-null MyGattCharacteristicArgs.');
          final Uint8List? arg_value = (args[1] as Uint8List?);
          assert(arg_value != null,
              'Argument for dev.flutter.pigeon.MyCentralControllerFlutterApi.onCharacteristicValueChanged was null, expected non-null Uint8List.');
          api.onCharacteristicValueChanged(arg_characteristicArgs!, arg_value!);
          return;
        });
      }
    }
  }
}
