// Autogenerated from Pigeon (v10.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.yanshouwang.bluetooth_low_energy

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface InstanceManagerHostApi {
  fun free(hashCode: Long)

  companion object {
    /** The codec used by InstanceManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `InstanceManagerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: InstanceManagerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.InstanceManagerHostApi.free", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.free(hashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface IntentHostApi {
  fun getAction(hashCode: Long): String?
  fun setAction(hashCode: Long, action: String?): Long
  fun getData(hashCode: Long): Long?
  fun setData(hashCode: Long, dataHashCode: Long?): Long
  fun getPackage(hashCode: Long): String?
  fun setPackage(hashCode: Long, packageName: String?): Long
  fun getCategories(hashCode: Long): List<String>
  fun getClipData(hashCode: Long): Long?
  fun setClipData(hashCode: Long, clipDataHashCode: Long?)
  fun getComponent(hashCode: Long): Long?
  fun setComponent(hashCode: Long, componentHashCode: Long?): Long
  fun getDataString(hashCode: Long): String?
  fun getExtras(hashCode: Long): Long?
  fun getFlags(hashCode: Long): Long
  fun setFlags(hashCode: Long, flags: Long): Long
  fun getIdentifier(hashCode: Long): String?
  fun setIdentifier(hashCode: Long, identifier: String?): Long
  fun getScheme(hashCode: Long): String?
  fun getSelector(hashCode: Long): Long?
  fun setSelector(hashCode: Long, selectorHashCode: Long?)
  fun getSourceBounds(hashCode: Long): Long?
  fun setSourceBounds(hashCode: Long, sourceBoundsHashCode: Long?)
  fun getType(hashCode: Long): String?
  fun setType(hashCode: Long, type: String?): Long
  fun addCategory(hashCode: Long, category: String): Long
  fun addFlags(hashCode: Long, flags: Long): Long
  fun cloneFilter(hashCode: Long): Long
  fun fillIn(hashCode: Long, otherHashCode: Long, flags: Long): Long
  fun filterEquals(hashCode: Long, otherHashCode: Long): Boolean
  fun filterHashCode(hashCode: Long): Long
  fun getBooleanArrayExtra(hashCode: Long, name: String): List<Boolean>?
  fun putBooleanArrayExtra(hashCode: Long, name: String, value: List<Boolean>?): Long
  fun getBooleanExtra(hashCode: Long, name: String, defaultValue: Boolean): Boolean
  fun putBooleanExtra(hashCode: Long, name: String, value: Boolean): Long
  fun getBundleExtra(hashCode: Long, name: String): Long?
  fun putBundleExtra(hashCode: Long, name: String, valueHashCode: Long?): Long
  fun getByteArrayExtra(hashCode: Long, name: String): ByteArray?
  fun putByteArrayExtra(hashCode: Long, name: String, value: ByteArray?): Long
  fun getDoubleArrayExtra(hashCode: Long, name: String): List<Double>?
  fun putDoubleArrayExtra(hashCode: Long, name: String, value: List<Double>?): Long
  fun getDoubleExtra(hashCode: Long, name: String, defaultValue: Double): Double
  fun putDoubleExtra(hashCode: Long, name: String, value: Double): Long
  fun getIntArrayExtra(hashCode: Long, name: String): List<Long>?
  fun putIntArrayExtra(hashCode: Long, name: String, value: List<Long>?): Long
  fun getIntExtra(hashCode: Long, name: String, defaultValue: Long): Long
  fun putIntExtra(hashCode: Long, name: String, value: Long): Long
  fun getLongArrayExtra(hashCode: Long, name: String): List<Long>?
  fun putLongArrayExtra(hashCode: Long, name: String, value: List<Long>?): Long
  fun getLongExtra(hashCode: Long, name: String, defaultValue: Long): Long
  fun putLongExtra(hashCode: Long, name: String, value: Long): Long
  fun getParcelableArrayExtra(hashCode: Long, name: String): List<Long>?
  fun putParcelableArrayExtra(hashCode: Long, name: String, valueHashCode: List<Long>?): Long
  fun getParcelableExtra(hashCode: Long, name: String): Long?
  fun putParcelableExtra(hashCode: Long, name: String, valueHashCode: Long?): Long
  fun getSerializableExtra(hashCode: Long, name: String): Long?
  fun putSerializableExtra(hashCode: Long, name: String, valueHashCode: Long?): Long
  fun getStringArrayExtra(hashCode: Long, name: String): List<String>?
  fun putStringArrayExtra(hashCode: Long, name: String, value: List<String>?): Long
  fun getStringExtra(hashCode: Long, name: String): String?
  fun putStringExtra(hashCode: Long, name: String, value: String?): Long
  fun putExtras(hashCode: Long, srcHashCode: Long): Long
  fun putExtras1(hashCode: Long, extrasHashCode: Long): Long
  fun hasCategory(hashCode: Long, category: String): Boolean
  fun hasExtra(hashCode: Long, name: String): Boolean
  fun hasFileDescriptors(hashCode: Long): Boolean
  fun readFromParcel(hashCode: Long, inHashCode: Long)
  fun removeCategory(hashCode: Long, category: String)
  fun removeExtra(hashCode: Long, name: String)
  fun removeFlags(hashCode: Long, flags: Long)
  fun replaceExtras(hashCode: Long, srcHashCode: Long): Long
  fun replaceExtras1(hashCode: Long, extrasHashCode: Long?): Long
  fun resolveActivity(hashCode: Long, pmHashCode: Long): Long
  fun resolveActivityInfo(hashCode: Long, pmHashCode: Long, flags: Long): Long
  fun resolveType(hashCode: Long): String?
  fun resolveType1(hashCode: Long, resolverHashCode: Long): String?
  fun resolveTypeIfNeeded(hashCode: Long, resolverHashCode: Long): String?
  fun setClass(hashCode: Long, clsHashCode: Long): Long
  fun setClassName(hashCode: Long, packageName: String, className: String): Long
  fun setClassName1(hashCode: Long, className: String): Long
  fun setDataAndNormalize(hashCode: Long, dataHashCode: Long): Long
  fun setDataAndType(hashCode: Long, dataHashCode: Long?, type: String?): Long
  fun setDataAndTypeAndNormalize(hashCode: Long, dataHashCode: Long, type: String?): Long
  fun setExtrasClassLoader(hashCode: Long, loaderHashCode: Long?)
  fun setTypeAndNormalize(hashCode: Long, type: String?): Long
  fun toUri(hashCode: Long, flags: Long): String

  companion object {
    /** The codec used by IntentHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `IntentHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: IntentHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getAction", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getAction(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setAction", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val actionArg = args[1] as String?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setAction(hashCodeArg, actionArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getData(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val dataHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setData(hashCodeArg, dataHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getPackage", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getPackage(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setPackage", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val packageNameArg = args[1] as String?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setPackage(hashCodeArg, packageNameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getCategories", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getCategories(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getClipData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getClipData(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setClipData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val clipDataHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              api.setClipData(hashCodeArg, clipDataHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getComponent", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getComponent(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setComponent", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val componentHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setComponent(hashCodeArg, componentHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getDataString", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getDataString(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getExtras", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getExtras(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getFlags", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getFlags(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setFlags", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val flagsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setFlags(hashCodeArg, flagsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getIdentifier", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getIdentifier(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setIdentifier", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val identifierArg = args[1] as String?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setIdentifier(hashCodeArg, identifierArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getScheme", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getScheme(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getSelector(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setSelector", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val selectorHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              api.setSelector(hashCodeArg, selectorHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getSourceBounds", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getSourceBounds(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setSourceBounds", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val sourceBoundsHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              api.setSourceBounds(hashCodeArg, sourceBoundsHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getType(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val typeArg = args[1] as String?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setType(hashCodeArg, typeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.addCategory", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val categoryArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.addCategory(hashCodeArg, categoryArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.addFlags", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val flagsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.addFlags(hashCodeArg, flagsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.cloneFilter", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.cloneFilter(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.fillIn", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val otherHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val flagsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.fillIn(hashCodeArg, otherHashCodeArg, flagsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.filterEquals", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val otherHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.filterEquals(hashCodeArg, otherHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.filterHashCode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.filterHashCode(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getBooleanArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getBooleanArrayExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putBooleanArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueArg = args[2] as List<Boolean>?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putBooleanArrayExtra(hashCodeArg, nameArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getBooleanExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val defaultValueArg = args[2] as Boolean
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getBooleanExtra(hashCodeArg, nameArg, defaultValueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putBooleanExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueArg = args[2] as Boolean
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putBooleanExtra(hashCodeArg, nameArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getBundleExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getBundleExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putBundleExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putBundleExtra(hashCodeArg, nameArg, valueHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getByteArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getByteArrayExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putByteArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueArg = args[2] as ByteArray?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putByteArrayExtra(hashCodeArg, nameArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getDoubleArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getDoubleArrayExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putDoubleArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueArg = args[2] as List<Double>?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putDoubleArrayExtra(hashCodeArg, nameArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getDoubleExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val defaultValueArg = args[2] as Double
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getDoubleExtra(hashCodeArg, nameArg, defaultValueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putDoubleExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueArg = args[2] as Double
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putDoubleExtra(hashCodeArg, nameArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getIntArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getIntArrayExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putIntArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueArg = args[2] as List<Long>?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putIntArrayExtra(hashCodeArg, nameArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getIntExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val defaultValueArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getIntExtra(hashCodeArg, nameArg, defaultValueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putIntExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putIntExtra(hashCodeArg, nameArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getLongArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getLongArrayExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putLongArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueArg = args[2] as List<Long>?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putLongArrayExtra(hashCodeArg, nameArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getLongExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val defaultValueArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getLongExtra(hashCodeArg, nameArg, defaultValueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putLongExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putLongExtra(hashCodeArg, nameArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getParcelableArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getParcelableArrayExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putParcelableArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueHashCodeArg = args[2] as List<Long>?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putParcelableArrayExtra(hashCodeArg, nameArg, valueHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getParcelableExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getParcelableExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putParcelableExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putParcelableExtra(hashCodeArg, nameArg, valueHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getSerializableExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getSerializableExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putSerializableExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putSerializableExtra(hashCodeArg, nameArg, valueHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getStringArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getStringArrayExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putStringArrayExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueArg = args[2] as List<String>?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putStringArrayExtra(hashCodeArg, nameArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.getStringExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getStringExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putStringExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val valueArg = args[2] as String?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putStringExtra(hashCodeArg, nameArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putExtras", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val srcHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putExtras(hashCodeArg, srcHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.putExtras1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val extrasHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.putExtras1(hashCodeArg, extrasHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.hasCategory", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val categoryArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.hasCategory(hashCodeArg, categoryArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.hasExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.hasExtra(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.hasFileDescriptors", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.hasFileDescriptors(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.readFromParcel", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val inHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.readFromParcel(hashCodeArg, inHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.removeCategory", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val categoryArg = args[1] as String
            var wrapped: List<Any?>
            try {
              api.removeCategory(hashCodeArg, categoryArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.removeExtra", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              api.removeExtra(hashCodeArg, nameArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.removeFlags", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val flagsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.removeFlags(hashCodeArg, flagsArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.replaceExtras", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val srcHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.replaceExtras(hashCodeArg, srcHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.replaceExtras1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val extrasHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.replaceExtras1(hashCodeArg, extrasHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.resolveActivity", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val pmHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.resolveActivity(hashCodeArg, pmHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.resolveActivityInfo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val pmHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val flagsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.resolveActivityInfo(hashCodeArg, pmHashCodeArg, flagsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.resolveType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.resolveType(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.resolveType1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val resolverHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.resolveType1(hashCodeArg, resolverHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.resolveTypeIfNeeded", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val resolverHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.resolveTypeIfNeeded(hashCodeArg, resolverHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setClass", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val clsHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setClass(hashCodeArg, clsHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setClassName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val packageNameArg = args[1] as String
            val classNameArg = args[2] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setClassName(hashCodeArg, packageNameArg, classNameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setClassName1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val classNameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setClassName1(hashCodeArg, classNameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setDataAndNormalize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val dataHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setDataAndNormalize(hashCodeArg, dataHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setDataAndType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val dataHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            val typeArg = args[2] as String?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setDataAndType(hashCodeArg, dataHashCodeArg, typeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setDataAndTypeAndNormalize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val dataHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val typeArg = args[2] as String?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setDataAndTypeAndNormalize(hashCodeArg, dataHashCodeArg, typeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setExtrasClassLoader", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val loaderHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              api.setExtrasClassLoader(hashCodeArg, loaderHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.setTypeAndNormalize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val typeArg = args[1] as String?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setTypeAndNormalize(hashCodeArg, typeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.IntentHostApi.toUri", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val flagsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.toUri(hashCodeArg, flagsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface PendingIntentHostApi {
  fun getService(requestCode: Long, intentHashCode: Long, flags: Long): Long
  fun getActivities(requestCode: Long, intentHashCodes: List<Long>, flags: Long): Long
  fun getActivities1(requestCode: Long, intentHashCodes: List<Long>, flags: Long, optionsHashCode: Long?): Long
  fun getActivity(requestCode: Long, intentHashCode: Long, flags: Long): Long
  fun getActivity1(requestCode: Long, intentHashCode: Long, flags: Long, optionsHashCode: Long?): Long
  fun getBroadcast(requestCode: Long, intentHashCode: Long, flags: Long): Long
  fun getForegroundService(requestCode: Long, intentHashCode: Long, flags: Long): Long

  companion object {
    /** The codec used by PendingIntentHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `PendingIntentHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: PendingIntentHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PendingIntentHostApi.getService", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val intentHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val flagsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getService(requestCodeArg, intentHashCodeArg, flagsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PendingIntentHostApi.getActivities", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val intentHashCodesArg = args[1] as List<Long>
            val flagsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getActivities(requestCodeArg, intentHashCodesArg, flagsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PendingIntentHostApi.getActivities1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val intentHashCodesArg = args[1] as List<Long>
            val flagsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val optionsHashCodeArg = args[3].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getActivities1(requestCodeArg, intentHashCodesArg, flagsArg, optionsHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PendingIntentHostApi.getActivity", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val intentHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val flagsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getActivity(requestCodeArg, intentHashCodeArg, flagsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PendingIntentHostApi.getActivity1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val intentHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val flagsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val optionsHashCodeArg = args[3].let { if (it is Int) it.toLong() else it as Long? }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getActivity1(requestCodeArg, intentHashCodeArg, flagsArg, optionsHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PendingIntentHostApi.getBroadcast", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val intentHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val flagsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getBroadcast(requestCodeArg, intentHashCodeArg, flagsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.PendingIntentHostApi.getForegroundService", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val intentHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val flagsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getForegroundService(requestCodeArg, intentHashCodeArg, flagsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface UuidHostApi {
  fun newInstance(mostSigBits: Long, leastSigBits: Long): Long
  fun randomUUID(): Long
  fun fromString(name: String): Long
  fun nameUUIDFromBytes(name: ByteArray): Long

  companion object {
    /** The codec used by UuidHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `UuidHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: UuidHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UuidHostApi.newInstance", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val mostSigBitsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val leastSigBitsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.newInstance(mostSigBitsArg, leastSigBitsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UuidHostApi.randomUUID", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.randomUUID())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UuidHostApi.fromString", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val nameArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.fromString(nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.UuidHostApi.nameUUIDFromBytes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val nameArg = args[0] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.nameUUIDFromBytes(nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ParcelUuidHostApi {
  fun newInstance(uuidHashCode: Long): Long
  fun fromString(uuid: String): Long

  companion object {
    /** The codec used by ParcelUuidHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `ParcelUuidHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ParcelUuidHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ParcelUuidHostApi.newInstance", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val uuidHashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.newInstance(uuidHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ParcelUuidHostApi.fromString", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val uuidArg = args[0] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.fromString(uuidArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BroadcastReceiverHostApi {
  fun newInstance(): Long

  companion object {
    /** The codec used by BroadcastReceiverHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BroadcastReceiverHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BroadcastReceiverHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BroadcastReceiverHostApi.newInstance", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.newInstance())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class BroadcastReceiverFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by BroadcastReceiverFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onReceive(hashCodeArg: Long, intentHashCodeArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BroadcastReceiverFlutterApi.onReceive", codec)
    channel.send(listOf(hashCodeArg, intentHashCodeArg)) {
      callback()
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BluetoothManagerHostApi {
  fun getInstance(): Long
  fun getAdapter(hashCode: Long): Long
  fun getConnectionState(hashCode: Long, deviceHashCode: Long, profile: Long): Long
  fun getConnectedDevices(hashCode: Long, profile: Long): List<Long>
  fun getDevicesMatchingConnectionStates(hashCode: Long, profile: Long, states: List<Long>): List<Long>
  fun openGattServer(hashCode: Long, callbackHashCode: Long): Long

  companion object {
    /** The codec used by BluetoothManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BluetoothManagerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BluetoothManagerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothManagerHostApi.getInstance", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getInstance())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothManagerHostApi.getAdapter", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getAdapter(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothManagerHostApi.getConnectionState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val deviceHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val profileArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getConnectionState(hashCodeArg, deviceHashCodeArg, profileArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothManagerHostApi.getConnectedDevices", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val profileArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getConnectedDevices(hashCodeArg, profileArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothManagerHostApi.getDevicesMatchingConnectionStates", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val profileArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val statesArg = args[2] as List<Long>
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getDevicesMatchingConnectionStates(hashCodeArg, profileArg, statesArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothManagerHostApi.openGattServer", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val callbackHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.openGattServer(hashCodeArg, callbackHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BluetoothGattServerCallbackHostApi {
  fun newInstance(): Long

  companion object {
    /** The codec used by BluetoothGattServerCallbackHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BluetoothGattServerCallbackHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BluetoothGattServerCallbackHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackHostApi.newInstance", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.newInstance())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class BluetoothGattServerCallbackFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by BluetoothGattServerCallbackFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onConnectionStateChange(hashCodeArg: Long, deviceHashCodeArg: Long, statusArg: Long, newStateArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackFlutterApi.onConnectionStateChange", codec)
    channel.send(listOf(hashCodeArg, deviceHashCodeArg, statusArg, newStateArg)) {
      callback()
    }
  }
  fun onServiceAdded(hashCodeArg: Long, statusArg: Long, serviceHashCodeArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackFlutterApi.onServiceAdded", codec)
    channel.send(listOf(hashCodeArg, statusArg, serviceHashCodeArg)) {
      callback()
    }
  }
  fun onCharacteristicReadRequest(hashCodeArg: Long, deviceHashCodeArg: Long, requestIdArg: Long, offsetArg: Long, characteristicHashCodeArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackFlutterApi.onCharacteristicReadRequest", codec)
    channel.send(listOf(hashCodeArg, deviceHashCodeArg, requestIdArg, offsetArg, characteristicHashCodeArg)) {
      callback()
    }
  }
  fun onCharacteristicWriteRequest(hashCodeArg: Long, deviceHashCodeArg: Long, requestIdArg: Long, characteristicHashCodeArg: Long, preparedWriteArg: Boolean, responseNeededArg: Boolean, offsetArg: Long, valueArg: ByteArray, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackFlutterApi.onCharacteristicWriteRequest", codec)
    channel.send(listOf(hashCodeArg, deviceHashCodeArg, requestIdArg, characteristicHashCodeArg, preparedWriteArg, responseNeededArg, offsetArg, valueArg)) {
      callback()
    }
  }
  fun onDescriptorReadRequest(hashCodeArg: Long, deviceHashCodeArg: Long, requestIdArg: Long, offsetArg: Long, descriptorHashCodeArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackFlutterApi.onDescriptorReadRequest", codec)
    channel.send(listOf(hashCodeArg, deviceHashCodeArg, requestIdArg, offsetArg, descriptorHashCodeArg)) {
      callback()
    }
  }
  fun onDescriptorWriteRequest(hashCodeArg: Long, deviceHashCodeArg: Long, requestIdArg: Long, descriptorHashCodeArg: Long, preparedWriteArg: Boolean, responseNeededArg: Boolean, offsetArg: Long, valueArg: ByteArray, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackFlutterApi.onDescriptorWriteRequest", codec)
    channel.send(listOf(hashCodeArg, deviceHashCodeArg, requestIdArg, descriptorHashCodeArg, preparedWriteArg, responseNeededArg, offsetArg, valueArg)) {
      callback()
    }
  }
  fun onExecuteWrite(hashCodeArg: Long, deviceHashCodeArg: Long, requestIdArg: Long, executeArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackFlutterApi.onExecuteWrite", codec)
    channel.send(listOf(hashCodeArg, deviceHashCodeArg, requestIdArg, executeArg)) {
      callback()
    }
  }
  fun onNotificationSent(hashCodeArg: Long, deviceHashCodeArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackFlutterApi.onNotificationSent", codec)
    channel.send(listOf(hashCodeArg, deviceHashCodeArg, statusArg)) {
      callback()
    }
  }
  fun onMtuChanged(hashCodeArg: Long, deviceHashCodeArg: Long, mtuArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackFlutterApi.onMtuChanged", codec)
    channel.send(listOf(hashCodeArg, deviceHashCodeArg, mtuArg)) {
      callback()
    }
  }
  fun onPhyUpdate(hashCodeArg: Long, deviceHashCodeArg: Long, txPhyArg: Long, rxPhyArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackFlutterApi.onPhyUpdate", codec)
    channel.send(listOf(hashCodeArg, deviceHashCodeArg, txPhyArg, rxPhyArg, statusArg)) {
      callback()
    }
  }
  fun onPhyRead(hashCodeArg: Long, deviceHashCodeArg: Long, txPhyArg: Long, rxPhyArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServerCallbackFlutterApi.onPhyRead", codec)
    channel.send(listOf(hashCodeArg, deviceHashCodeArg, txPhyArg, rxPhyArg, statusArg)) {
      callback()
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BluetoothAdapterHostApi {
  fun getAddress(hashCode: Long): String
  fun getState(hashCode: Long): Long
  fun isEnabled(hashCode: Long): Boolean
  fun isDiscovering(hashCode: Long): Boolean
  fun getName(hashCode: Long): String
  fun setName(hashCode: Long, name: String): Boolean
  fun getScanMode(hashCode: Long): Long
  fun getBluetoothLeScanner(hashCode: Long): Long
  fun getBluetoothLeAdvertiser(hashCode: Long): Long
  fun getBondedDevices(hashCode: Long): List<Long>
  fun isLe2MPhySupported(hashCode: Long): Boolean
  fun isLeCodedPhySupported(hashCode: Long): Boolean
  fun isLeExtendedAdvertisingSupported(hashCode: Long): Boolean
  fun isLePeriodicAdvertisingSupported(hashCode: Long): Boolean
  fun isMultipleAdvertisementSupported(hashCode: Long): Boolean
  fun isOffloadedFilteringSupported(hashCode: Long): Boolean
  fun isOffloadedScanBatchingSupported(hashCode: Long): Boolean
  fun leMaximumAdvertisingDataLength(hashCode: Long): Long
  fun enable(hashCode: Long): Boolean
  fun disable(hashCode: Long): Boolean
  fun startDiscovery(hashCode: Long): Boolean
  fun cancelDiscovery(hashCode: Long): Boolean
  fun getRemoteDevice(hashCode: Long, address: String): Long
  fun getRemoteDevice1(hashCode: Long, address: ByteArray): Long
  fun getProfileProxy(hashCode: Long, listenerHashCode: Long, profile: Long): Boolean
  fun closeProfileProxy(hashCode: Long, profile: Long, proxyHashCode: Long)
  fun getProfileConnectionState(hashCode: Long, profile: Long): Long
  fun listenUsingInsecureL2capChannel(hashCode: Long): Long
  fun listenUsingInsecureRfcommWithServiceRecord(hashCode: Long, name: String, uuidHashCode: Long): Long
  fun listenUsingL2capChannel(hashCode: Long): Long
  fun listenUsingRfcommWithServiceRecord(hashCode: Long, name: String, uuidHashCode: Long): Long

  companion object {
    /** The codec used by BluetoothAdapterHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BluetoothAdapterHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BluetoothAdapterHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.getAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getAddress(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.getState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getState(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.isEnabled", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isEnabled(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.isDiscovering", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isDiscovering(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.getName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getName(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.setName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setName(hashCodeArg, nameArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.getScanMode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getScanMode(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.getBluetoothLeScanner", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getBluetoothLeScanner(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.getBluetoothLeAdvertiser", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getBluetoothLeAdvertiser(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.getBondedDevices", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getBondedDevices(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.isLe2MPhySupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isLe2MPhySupported(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.isLeCodedPhySupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isLeCodedPhySupported(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.isLeExtendedAdvertisingSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isLeExtendedAdvertisingSupported(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.isLePeriodicAdvertisingSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isLePeriodicAdvertisingSupported(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.isMultipleAdvertisementSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isMultipleAdvertisementSupported(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.isOffloadedFilteringSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isOffloadedFilteringSupported(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.isOffloadedScanBatchingSupported", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isOffloadedScanBatchingSupported(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.leMaximumAdvertisingDataLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.leMaximumAdvertisingDataLength(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.enable", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.enable(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.disable", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.disable(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.startDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.startDiscovery(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.cancelDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.cancelDiscovery(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.getRemoteDevice", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val addressArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getRemoteDevice(hashCodeArg, addressArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.getRemoteDevice1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val addressArg = args[1] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getRemoteDevice1(hashCodeArg, addressArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.getProfileProxy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val listenerHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val profileArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getProfileProxy(hashCodeArg, listenerHashCodeArg, profileArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.closeProfileProxy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val profileArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val proxyHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.closeProfileProxy(hashCodeArg, profileArg, proxyHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.getProfileConnectionState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val profileArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getProfileConnectionState(hashCodeArg, profileArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.listenUsingInsecureL2capChannel", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.listenUsingInsecureL2capChannel(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.listenUsingInsecureRfcommWithServiceRecord", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val uuidHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.listenUsingInsecureRfcommWithServiceRecord(hashCodeArg, nameArg, uuidHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.listenUsingL2capChannel", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.listenUsingL2capChannel(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothAdapterHostApi.listenUsingRfcommWithServiceRecord", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val nameArg = args[1] as String
            val uuidHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.listenUsingRfcommWithServiceRecord(hashCodeArg, nameArg, uuidHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BluetoothProfileServiceListenerHostApi {
  fun newInstance(): Long

  companion object {
    /** The codec used by BluetoothProfileServiceListenerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BluetoothProfileServiceListenerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BluetoothProfileServiceListenerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothProfileServiceListenerHostApi.newInstance", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.newInstance())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class BluetoothProfileServiceListenerFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by BluetoothProfileServiceListenerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onServiceConnected(hashCodeArg: Long, profileArg: Long, proxyHashCodeArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothProfileServiceListenerFlutterApi.onServiceConnected", codec)
    channel.send(listOf(hashCodeArg, profileArg, proxyHashCodeArg)) {
      callback()
    }
  }
  fun onServiceDisconnected(hashCodeArg: Long, profileArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothProfileServiceListenerFlutterApi.onServiceDisconnected", codec)
    channel.send(listOf(hashCodeArg, profileArg)) {
      callback()
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BluetoothLeScannerHostApi {
  fun startScan(hashCode: Long, callbackHashCode: Long)
  fun startScan1(hashCode: Long, filterHashCodes: List<Long>, settingsHashCode: Long, callbackHashCode: Long)
  fun startScan2(hashCode: Long, filterHashCodes: List<Long>, settingsHashCode: Long, callbackIntentHashCode: Long)
  fun stopScan(hashCode: Long, callbackHashCode: Long)
  fun stopScan1(hashCode: Long, callbackIntentHashCode: Long)
  fun flushPendingScanResults(hashCode: Long, callbackHashCode: Long)

  companion object {
    /** The codec used by BluetoothLeScannerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BluetoothLeScannerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BluetoothLeScannerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothLeScannerHostApi.startScan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val callbackHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.startScan(hashCodeArg, callbackHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothLeScannerHostApi.startScan1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val filterHashCodesArg = args[1] as List<Long>
            val settingsHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val callbackHashCodeArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.startScan1(hashCodeArg, filterHashCodesArg, settingsHashCodeArg, callbackHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothLeScannerHostApi.startScan2", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val filterHashCodesArg = args[1] as List<Long>
            val settingsHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val callbackIntentHashCodeArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.startScan2(hashCodeArg, filterHashCodesArg, settingsHashCodeArg, callbackIntentHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothLeScannerHostApi.stopScan", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val callbackHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.stopScan(hashCodeArg, callbackHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothLeScannerHostApi.stopScan1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val callbackIntentHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.stopScan1(hashCodeArg, callbackIntentHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothLeScannerHostApi.flushPendingScanResults", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val callbackHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.flushPendingScanResults(hashCodeArg, callbackHashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ScanCallbackHostApi {
  fun newInstance(): Long

  companion object {
    /** The codec used by ScanCallbackHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `ScanCallbackHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ScanCallbackHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanCallbackHostApi.newInstance", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.newInstance())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class ScanCallbackFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by ScanCallbackFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onScanResult(hashCodeArg: Long, callbackTypeArg: Long, resultHashCodeArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanCallbackFlutterApi.onScanResult", codec)
    channel.send(listOf(hashCodeArg, callbackTypeArg, resultHashCodeArg)) {
      callback()
    }
  }
  fun onBatchScanResults(hashCodeArg: Long, resultHashCodesArg: List<Long>, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanCallbackFlutterApi.onBatchScanResults", codec)
    channel.send(listOf(hashCodeArg, resultHashCodesArg)) {
      callback()
    }
  }
  fun onScanFailed(hashCodeArg: Long, errorCodeArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanCallbackFlutterApi.onScanFailed", codec)
    channel.send(listOf(hashCodeArg, errorCodeArg)) {
      callback()
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ScanResultHostApi {
  fun getDevice(hashCode: Long): Long
  fun getRSSI(hashCode: Long): Long
  fun getScanRecord(hashCode: Long): Long?
  fun getAdvertisingSId(hashCode: Long): Long
  fun getDataStatus(hashCode: Long): Long
  fun getPeriodicAdvertisingInterval(hashCode: Long): Long
  fun getPrimaryPhy(hashCode: Long): Long
  fun getSecondaryPhy(hashCode: Long): Long
  fun getTimestampNanos(hashCode: Long): Long
  fun getTxPower(hashCode: Long): Long
  fun getIsConnectable(hashCode: Long): Boolean
  fun getIsLegacy(hashCode: Long): Boolean

  companion object {
    /** The codec used by ScanResultHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `ScanResultHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ScanResultHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getDevice", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getDevice(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getRSSI", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getRSSI(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getScanRecord", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getScanRecord(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getAdvertisingSId", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getAdvertisingSId(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getDataStatus", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getDataStatus(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getPeriodicAdvertisingInterval", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getPeriodicAdvertisingInterval(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getPrimaryPhy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getPrimaryPhy(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getSecondaryPhy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getSecondaryPhy(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getTimestampNanos", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getTimestampNanos(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getTxPower", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getTxPower(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getIsConnectable", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getIsConnectable(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanResultHostApi.getIsLegacy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getIsLegacy(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface ScanRecordHostApi {
  fun getManufacturerSpecificData(hashCode: Long): Map<Long, ByteArray>
  fun getManufacturerSpecificDataWithId(hashCode: Long, manufacturerId: Long): ByteArray?
  fun getBytes(hashCode: Long): ByteArray
  fun getServiceData(hashCode: Long): Map<Long, ByteArray>
  fun getServiceDataWithUUID(hashCode: Long, serviceDataUuidHashCode: Long): ByteArray?
  fun getAdvertiseFlags(hashCode: Long): Long
  fun getDeviceName(hashCode: Long): String?
  fun getServiceUUIDs(hashCode: Long): List<Long>
  fun getServiceSolicitationUUIDs(hashCode: Long): List<Long>
  fun getTxPowerLevel(hashCode: Long): Long

  companion object {
    /** The codec used by ScanRecordHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `ScanRecordHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: ScanRecordHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanRecordHostApi.getManufacturerSpecificData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getManufacturerSpecificData(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanRecordHostApi.getManufacturerSpecificDataWithId", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val manufacturerIdArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getManufacturerSpecificDataWithId(hashCodeArg, manufacturerIdArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanRecordHostApi.getBytes", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getBytes(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanRecordHostApi.getServiceData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getServiceData(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanRecordHostApi.getServiceDataWithUUID", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val serviceDataUuidHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getServiceDataWithUUID(hashCodeArg, serviceDataUuidHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanRecordHostApi.getAdvertiseFlags", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getAdvertiseFlags(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanRecordHostApi.getDeviceName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getDeviceName(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanRecordHostApi.getServiceUUIDs", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getServiceUUIDs(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanRecordHostApi.getServiceSolicitationUUIDs", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getServiceSolicitationUUIDs(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.ScanRecordHostApi.getTxPowerLevel", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getTxPowerLevel(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BluetoothDeviceHostApi {
  fun getAddress(hashCode: Long): String
  fun getName(hashCode: Long): String
  fun getAlias(hashCode: Long): String?
  fun setAlias(hashCode: Long, alias: String?): Long
  fun getBluetoothClass(hashCode: Long): Long
  fun getBondState(hashCode: Long): Long
  fun getType(hashCode: Long): Long
  fun getUUIDs(hashCode: Long): List<Long>
  fun fetchUuidsWithSdp(hashCode: Long): Boolean
  fun setPin(hashCode: Long, pin: ByteArray): Boolean
  fun setPairingConfirmation(hashCode: Long, confirm: Boolean): Boolean
  fun createBond(hashCode: Long): Boolean
  fun createInsecureL2capChannel(hashCode: Long, psm: Long): Long
  fun createL2capChannel(hashCode: Long, psm: Long): Long
  fun createInsecureRfcommSocketToServiceRecord(hashCode: Long, uuidHashCode: Long): Long
  fun createRfcommSocketToServiceRecord(hashCode: Long, uuidHashCode: Long): Long
  fun connectGatt(hashCode: Long, autoConnect: Boolean, callbackHashCode: Long): Long
  fun connectGatt1(hashCode: Long, autoConnect: Boolean, callbackHashCode: Long, transport: Long): Long
  fun connectGatt2(hashCode: Long, autoConnect: Boolean, callbackHashCode: Long, transport: Long, phy: Long): Long
  fun connectGatt3(hashCode: Long, autoConnect: Boolean, callbackHashCode: Long, transport: Long, phy: Long, handlerHashCode: Long): Long

  companion object {
    /** The codec used by BluetoothDeviceHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BluetoothDeviceHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BluetoothDeviceHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.getAddress", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getAddress(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.getName", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getName(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.getAlias", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getAlias(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.setAlias", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val aliasArg = args[1] as String?
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setAlias(hashCodeArg, aliasArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.getBluetoothClass", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getBluetoothClass(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.getBondState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getBondState(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.getType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getType(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.getUUIDs", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getUUIDs(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.fetchUuidsWithSdp", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.fetchUuidsWithSdp(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.setPin", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val pinArg = args[1] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setPin(hashCodeArg, pinArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.setPairingConfirmation", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val confirmArg = args[1] as Boolean
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setPairingConfirmation(hashCodeArg, confirmArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.createBond", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.createBond(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.createInsecureL2capChannel", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val psmArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.createInsecureL2capChannel(hashCodeArg, psmArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.createL2capChannel", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val psmArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.createL2capChannel(hashCodeArg, psmArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.createInsecureRfcommSocketToServiceRecord", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val uuidHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.createInsecureRfcommSocketToServiceRecord(hashCodeArg, uuidHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.createRfcommSocketToServiceRecord", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val uuidHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.createRfcommSocketToServiceRecord(hashCodeArg, uuidHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.connectGatt", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val autoConnectArg = args[1] as Boolean
            val callbackHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.connectGatt(hashCodeArg, autoConnectArg, callbackHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.connectGatt1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val autoConnectArg = args[1] as Boolean
            val callbackHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val transportArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.connectGatt1(hashCodeArg, autoConnectArg, callbackHashCodeArg, transportArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.connectGatt2", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val autoConnectArg = args[1] as Boolean
            val callbackHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val transportArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            val phyArg = args[4].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.connectGatt2(hashCodeArg, autoConnectArg, callbackHashCodeArg, transportArg, phyArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothDeviceHostApi.connectGatt3", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val autoConnectArg = args[1] as Boolean
            val callbackHashCodeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val transportArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            val phyArg = args[4].let { if (it is Int) it.toLong() else it as Long }
            val handlerHashCodeArg = args[5].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.connectGatt3(hashCodeArg, autoConnectArg, callbackHashCodeArg, transportArg, phyArg, handlerHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BluetoothGattCallbackHostApi {
  fun newInstance(): Long

  companion object {
    /** The codec used by BluetoothGattCallbackHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BluetoothGattCallbackHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BluetoothGattCallbackHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackHostApi.newInstance", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.newInstance())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class BluetoothGattCallbackFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by BluetoothGattCallbackFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
  }
  fun onPhyUpdate(hashCodeArg: Long, gattHashCodeArg: Long, txPhyArg: Long, rxPhyArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onPhyUpdate", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, txPhyArg, rxPhyArg, statusArg)) {
      callback()
    }
  }
  fun onPhyRead(hashCodeArg: Long, gattHashCodeArg: Long, txPhyArg: Long, rxPhyArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onPhyRead", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, txPhyArg, rxPhyArg, statusArg)) {
      callback()
    }
  }
  fun onConnectionStateChange(hashCodeArg: Long, gattHashCodeArg: Long, statusArg: Long, newStateArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onConnectionStateChange", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, statusArg, newStateArg)) {
      callback()
    }
  }
  fun onServicesDiscovered(hashCodeArg: Long, gattHashCodeArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onServicesDiscovered", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, statusArg)) {
      callback()
    }
  }
  fun onCharacteristicRead(hashCodeArg: Long, gattHashCodeArg: Long, characteristicHashCodeArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onCharacteristicRead", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, characteristicHashCodeArg, statusArg)) {
      callback()
    }
  }
  fun onCharacteristicWrite(hashCodeArg: Long, gattHashCodeArg: Long, characteristicHashCodeArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onCharacteristicWrite", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, characteristicHashCodeArg, statusArg)) {
      callback()
    }
  }
  fun onCharacteristicChanged(hashCodeArg: Long, gattHashCodeArg: Long, characteristicHashCodeArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onCharacteristicChanged", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, characteristicHashCodeArg)) {
      callback()
    }
  }
  fun onDescriptorRead(hashCodeArg: Long, gattHashCodeArg: Long, descriptorHashCodeArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onDescriptorRead", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, descriptorHashCodeArg, statusArg)) {
      callback()
    }
  }
  fun onDescriptorWrite(hashCodeArg: Long, gattHashCodeArg: Long, descriptorHashCodeArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onDescriptorWrite", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, descriptorHashCodeArg, statusArg)) {
      callback()
    }
  }
  fun onReliableWriteCompleted(hashCodeArg: Long, gattHashCodeArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onReliableWriteCompleted", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, statusArg)) {
      callback()
    }
  }
  fun onReadRemoteRssi(hashCodeArg: Long, gattHashCodeArg: Long, rssiArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onReadRemoteRssi", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, rssiArg, statusArg)) {
      callback()
    }
  }
  fun onMtuChanged(hashCodeArg: Long, gattHashCodeArg: Long, mtuArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onMtuChanged", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, mtuArg, statusArg)) {
      callback()
    }
  }
  fun onConnectionUpdated(hashCodeArg: Long, gattHashCodeArg: Long, intervalArg: Long, latencyArg: Long, timeoutArg: Long, statusArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onConnectionUpdated", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg, intervalArg, latencyArg, timeoutArg, statusArg)) {
      callback()
    }
  }
  fun onServiceChanged(hashCodeArg: Long, gattHashCodeArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCallbackFlutterApi.onServiceChanged", codec)
    channel.send(listOf(hashCodeArg, gattHashCodeArg)) {
      callback()
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BluetoothGattHostApi {
  fun getDevice(hashCode: Long): Long
  fun getConnectedDevices(hashCode: Long): List<Long>
  fun getServices(hashCode: Long): List<Long>
  fun connect(hashCode: Long): Boolean
  fun discoverServices(hashCode: Long): Boolean
  fun getService(hashCode: Long, uuidHashCode: Long): Long
  fun beginReliableWrite(hashCode: Long): Boolean
  fun executeReliableWrite(hashCode: Long): Boolean
  fun abortReliableWrite(hashCode: Long)
  fun disconnect(hashCode: Long)
  fun close(hashCode: Long)
  fun readCharacteristic(hashCode: Long, characteristicHashCode: Long): Boolean
  fun writeCharacteristic(hashCode: Long, characteristicHashCode: Long): Boolean
  fun setCharacteristicNotification(hashCode: Long, characteristicHashCode: Long, enable: Boolean): Boolean
  fun readDescriptor(hashCode: Long, descriptorHashCode: Long): Boolean
  fun writeDescriptor(hashCode: Long, descriptorHashCode: Long): Boolean
  fun readRemoteRssi(hashCode: Long): Boolean
  fun readPhy(hashCode: Long)
  fun requestMtu(hashCode: Long, mtu: Long): Boolean
  fun requestConnectionPriority(hashCode: Long, connectionPriority: Long): Boolean
  fun setPreferredPhy(hashCode: Long, txPhy: Long, rxPhy: Long, phyOptions: Long)
  fun getConnectionState(hashCode: Long, deviceHashCode: Long): Long
  fun getDevicesMatchingConnectionStates(hashCode: Long, states: List<Long>): List<Long>

  companion object {
    /** The codec used by BluetoothGattHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BluetoothGattHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BluetoothGattHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.getDevice", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getDevice(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.getConnectedDevices", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getConnectedDevices(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.getServices", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getServices(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.connect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.connect(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.discoverServices", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.discoverServices(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.getService", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val uuidHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getService(hashCodeArg, uuidHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.beginReliableWrite", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.beginReliableWrite(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.executeReliableWrite", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.executeReliableWrite(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.abortReliableWrite", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.abortReliableWrite(hashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.disconnect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.disconnect(hashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.close", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.close(hashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.readCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val characteristicHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.readCharacteristic(hashCodeArg, characteristicHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.writeCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val characteristicHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.writeCharacteristic(hashCodeArg, characteristicHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.setCharacteristicNotification", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val characteristicHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val enableArg = args[2] as Boolean
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setCharacteristicNotification(hashCodeArg, characteristicHashCodeArg, enableArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.readDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val descriptorHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.readDescriptor(hashCodeArg, descriptorHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.writeDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val descriptorHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.writeDescriptor(hashCodeArg, descriptorHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.readRemoteRssi", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.readRemoteRssi(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.readPhy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.readPhy(hashCodeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.requestMtu", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val mtuArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.requestMtu(hashCodeArg, mtuArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.requestConnectionPriority", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val connectionPriorityArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.requestConnectionPriority(hashCodeArg, connectionPriorityArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.setPreferredPhy", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val txPhyArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val rxPhyArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val phyOptionsArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.setPreferredPhy(hashCodeArg, txPhyArg, rxPhyArg, phyOptionsArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.getConnectionState", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val deviceHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getConnectionState(hashCodeArg, deviceHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattHostApi.getDevicesMatchingConnectionStates", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val statesArg = args[1] as List<Long>
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getDevicesMatchingConnectionStates(hashCodeArg, statesArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BluetoothGattServiceHostApi {
  fun getType(hashCode: Long): Long
  fun getUUID(hashCode: Long): Long
  fun getIncludedServices(hashCode: Long): List<Long>
  fun getCharacteristics(hashCode: Long): List<Long>
  fun getInstanceId(hashCode: Long): Long
  fun getCharacteristic(hashCode: Long, uuidHashCode: Long): Long
  fun addService(hashCode: Long, serviceHashCode: Long): Boolean
  fun addCharacteristic(hashCode: Long, characteristicHashCode: Long): Boolean

  companion object {
    /** The codec used by BluetoothGattServiceHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BluetoothGattServiceHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BluetoothGattServiceHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServiceHostApi.getType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getType(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServiceHostApi.getUUID", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getUUID(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServiceHostApi.getIncludedServices", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getIncludedServices(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServiceHostApi.getCharacteristics", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getCharacteristics(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServiceHostApi.getInstanceId", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getInstanceId(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServiceHostApi.getCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val uuidHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getCharacteristic(hashCodeArg, uuidHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServiceHostApi.addService", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val serviceHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.addService(hashCodeArg, serviceHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattServiceHostApi.addCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val characteristicHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.addCharacteristic(hashCodeArg, characteristicHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BluetoothGattCharacteristicHostApi {
  fun getService(hashCode: Long): Long
  fun getUUID(hashCode: Long): Long
  fun getInstanceId(hashCode: Long): Long
  fun getValue(hashCode: Long): ByteArray
  fun setValue(hashCode: Long, value: ByteArray): Boolean
  fun setValue1(hashCode: Long, value: String): Boolean
  fun setValue2(hashCode: Long, value: Long, formatType: Long, offset: Long): Boolean
  fun setValue3(hashCode: Long, mantissa: Long, exponent: Long, formatType: Long, offset: Long): Boolean
  fun getDescriptors(hashCode: Long): List<Long>
  fun getDescriptor(hashCode: Long, uuidHashCode: Long): Long
  fun getPermissions(hashCode: Long): Long
  fun getProperties(hashCode: Long): Long
  fun getWriteType(hashCode: Long): Long
  fun setWriteType(hashCode: Long, writeType: Long)
  fun getFloatValue(hashCode: Long, formatType: Long, offset: Long): Double
  fun getIntValue(hashCode: Long, formatType: Long, offset: Long): Long
  fun getStringValue(hashCode: Long, offset: Long): String
  fun addDescriptor(hashCode: Long, descriptorHashCode: Long): Boolean

  companion object {
    /** The codec used by BluetoothGattCharacteristicHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BluetoothGattCharacteristicHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BluetoothGattCharacteristicHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getService", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getService(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getUUID", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getUUID(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getInstanceId", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getInstanceId(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getValue(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.setValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val valueArg = args[1] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setValue(hashCodeArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.setValue1", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val valueArg = args[1] as String
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setValue1(hashCodeArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.setValue2", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val valueArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val formatTypeArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val offsetArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setValue2(hashCodeArg, valueArg, formatTypeArg, offsetArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.setValue3", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val mantissaArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val exponentArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val formatTypeArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            val offsetArg = args[4].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setValue3(hashCodeArg, mantissaArg, exponentArg, formatTypeArg, offsetArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getDescriptors", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getDescriptors(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val uuidHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getDescriptor(hashCodeArg, uuidHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getPermissions", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getPermissions(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getProperties", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getProperties(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getWriteType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getWriteType(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.setWriteType", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val writeTypeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.setWriteType(hashCodeArg, writeTypeArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getFloatValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val formatTypeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val offsetArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getFloatValue(hashCodeArg, formatTypeArg, offsetArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getIntValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val formatTypeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val offsetArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getIntValue(hashCodeArg, formatTypeArg, offsetArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.getStringValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val offsetArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getStringValue(hashCodeArg, offsetArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattCharacteristicHostApi.addDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val descriptorHashCodeArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.addDescriptor(hashCodeArg, descriptorHashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface BluetoothGattDescriptorHostApi {
  fun getCharacteristic(hashCode: Long): Long
  fun getUUID(hashCode: Long): Long
  fun getPermissions(hashCode: Long): Long
  fun getValue(hashCode: Long): ByteArray
  fun setValue(hashCode: Long, value: ByteArray): Boolean

  companion object {
    /** The codec used by BluetoothGattDescriptorHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      StandardMessageCodec()
    }
    /** Sets up an instance of `BluetoothGattDescriptorHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: BluetoothGattDescriptorHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattDescriptorHostApi.getCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getCharacteristic(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattDescriptorHostApi.getUUID", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getUUID(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattDescriptorHostApi.getPermissions", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getPermissions(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattDescriptorHostApi.getValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getValue(hashCodeArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.BluetoothGattDescriptorHostApi.setValue", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val hashCodeArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val valueArg = args[1] as ByteArray
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.setValue(hashCodeArg, valueArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
