// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class CentralManagerStateArgs(val raw: Int) {
  UNKNOWN(0),
  UNSUPPORTED(1),
  UNAUTHORIZED(2),
  POWEREDOFF(3),
  POWEREDON(4);

  companion object {
    fun ofRaw(raw: Int): CentralManagerStateArgs? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class PeripheralStateArgs(val raw: Int) {
  DISCONNECTED(0),
  CONNECTING(1),
  CONNECTED(2);

  companion object {
    fun ofRaw(raw: Int): PeripheralStateArgs? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class GattCharacteristicWriteTypeArgs(val raw: Int) {
  WITHRESPONSE(0),
  WITHOUTRESPONSE(1);

  companion object {
    fun ofRaw(raw: Int): GattCharacteristicWriteTypeArgs? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PeripheralArgs (
  val id: String,
  val name: String,
  val rssi: Long,
  val manufacturerSpecificData: ByteArray? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PeripheralArgs {
      val id = list[0] as String
      val name = list[1] as String
      val rssi = list[2].let { if (it is Int) it.toLong() else it as Long }
      val manufacturerSpecificData = list[3] as ByteArray?
      return PeripheralArgs(id, name, rssi, manufacturerSpecificData)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      name,
      rssi,
      manufacturerSpecificData,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GattServiceArgs (
  val id: String,
  val characteristicArgs: List<GattCharacteristicArgs?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): GattServiceArgs {
      val id = list[0] as String
      val characteristicArgs = list[1] as List<GattCharacteristicArgs?>
      return GattServiceArgs(id, characteristicArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      characteristicArgs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GattCharacteristicArgs (
  val id: String,
  val canRead: Boolean,
  val canWrite: Boolean,
  val canWriteWithoutResponse: Boolean,
  val canNotify: Boolean,
  val descriptorArgs: List<GattDescriptorArgs?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): GattCharacteristicArgs {
      val id = list[0] as String
      val canRead = list[1] as Boolean
      val canWrite = list[2] as Boolean
      val canWriteWithoutResponse = list[3] as Boolean
      val canNotify = list[4] as Boolean
      val descriptorArgs = list[5] as List<GattDescriptorArgs?>
      return GattCharacteristicArgs(id, canRead, canWrite, canWriteWithoutResponse, canNotify, descriptorArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      canRead,
      canWrite,
      canWriteWithoutResponse,
      canNotify,
      descriptorArgs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GattDescriptorArgs (
  val id: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): GattDescriptorArgs {
      val id = list[0] as String
      return GattDescriptorArgs(id)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CentralManagerStateEventArgs (
  val stateArgs: CentralManagerStateArgs

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): CentralManagerStateEventArgs {
      val stateArgs = CentralManagerStateArgs.ofRaw(list[0] as Int)!!
      return CentralManagerStateEventArgs(stateArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      stateArgs.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PeripheralEventArgs (
  val peripheralArgs: PeripheralArgs

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PeripheralEventArgs {
      val peripheralArgs = PeripheralArgs.fromList(list[0] as List<Any?>)
      return PeripheralEventArgs(peripheralArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      peripheralArgs.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PeripheralStateEventArgs (
  val id: String,
  val stateArgs: PeripheralStateArgs

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): PeripheralStateEventArgs {
      val id = list[0] as String
      val stateArgs = PeripheralStateArgs.ofRaw(list[1] as Int)!!
      return PeripheralStateEventArgs(id, stateArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      stateArgs.raw,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GattCharacteristicValueEventArgs (
  val id: String,
  val serviceId: String,
  val characteristicId: String,
  val value: ByteArray

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): GattCharacteristicValueEventArgs {
      val id = list[0] as String
      val serviceId = list[1] as String
      val characteristicId = list[2] as String
      val value = list[3] as ByteArray
      return GattCharacteristicValueEventArgs(id, serviceId, characteristicId, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      serviceId,
      characteristicId,
      value,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object CentralManagerHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GattCharacteristicArgs.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GattDescriptorArgs.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GattServiceArgs.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is GattCharacteristicArgs -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is GattDescriptorArgs -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is GattServiceArgs -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface CentralManagerHostApi {
  fun initialize()
  fun startScan(callback: (Result<Unit>) -> Unit)
  fun stopScan()
  fun connect(id: String, callback: (Result<Unit>) -> Unit)
  fun disconnect(id: String)
  fun discoverService(id: String, serviceId: String, callback: (Result<GattServiceArgs>) -> Unit)
  fun read(id: String, serviceId: String, characteristicId: String, callback: (Result<ByteArray>) -> Unit)
  fun write(id: String, serviceId: String, characteristicId: String, value: ByteArray, typeArgs: GattCharacteristicWriteTypeArgs, callback: (Result<Unit>) -> Unit)
  fun notify(id: String, serviceId: String, characteristicId: String, value: Boolean, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by CentralManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      CentralManagerHostApiCodec
    }
    /** Sets up an instance of `CentralManagerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: CentralManagerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerHostApi.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.initialize()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerHostApi.startScan", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.startScan() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerHostApi.stopScan", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopScan()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerHostApi.connect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            api.connect(idArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerHostApi.disconnect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.disconnect(idArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerHostApi.discoverService", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val serviceIdArg = args[1] as String
            api.discoverService(idArg, serviceIdArg) { result: Result<GattServiceArgs> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerHostApi.read", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val serviceIdArg = args[1] as String
            val characteristicIdArg = args[2] as String
            api.read(idArg, serviceIdArg, characteristicIdArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerHostApi.write", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val serviceIdArg = args[1] as String
            val characteristicIdArg = args[2] as String
            val valueArg = args[3] as ByteArray
            val typeArgsArg = GattCharacteristicWriteTypeArgs.ofRaw(args[4] as Int)!!
            api.write(idArg, serviceIdArg, characteristicIdArg, valueArg, typeArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerHostApi.notify", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val serviceIdArg = args[1] as String
            val characteristicIdArg = args[2] as String
            val valueArg = args[3] as Boolean
            api.notify(idArg, serviceIdArg, characteristicIdArg, valueArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object CentralManagerFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CentralManagerStateEventArgs.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GattCharacteristicValueEventArgs.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PeripheralArgs.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PeripheralEventArgs.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PeripheralStateEventArgs.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CentralManagerStateEventArgs -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is GattCharacteristicValueEventArgs -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is PeripheralArgs -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is PeripheralEventArgs -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is PeripheralStateEventArgs -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class CentralManagerFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by CentralManagerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      CentralManagerFlutterApiCodec
    }
  }
  fun onStateChanged(eventArgsArg: CentralManagerStateEventArgs, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerFlutterApi.onStateChanged", codec)
    channel.send(listOf(eventArgsArg)) {
      callback()
    }
  }
  fun onScanned(eventArgsArg: PeripheralEventArgs, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerFlutterApi.onScanned", codec)
    channel.send(listOf(eventArgsArg)) {
      callback()
    }
  }
  fun onPeripheralStateChanged(eventArgsArg: PeripheralStateEventArgs, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerFlutterApi.onPeripheralStateChanged", codec)
    channel.send(listOf(eventArgsArg)) {
      callback()
    }
  }
  fun onCharacteristicValueChanged(eventArgsArg: GattCharacteristicValueEventArgs, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.CentralManagerFlutterApi.onCharacteristicValueChanged", codec)
    channel.send(listOf(eventArgsArg)) {
      callback()
    }
  }
}
