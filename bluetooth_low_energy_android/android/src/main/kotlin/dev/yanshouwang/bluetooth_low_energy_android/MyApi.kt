// Autogenerated from Pigeon (v10.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class MyCentralManagerState(val raw: Int) {
  UNKNOWN(0),
  UNSUPPORTED(1),
  UNAUTHORIZED(2),
  POWEREDOFF(3),
  POWEREDON(4);

  companion object {
    fun ofRaw(raw: Int): MyCentralManagerState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MyPeripheralState(val raw: Int) {
  DISCONNECTED(0),
  CONNECTING(1),
  CONNECTED(2);

  companion object {
    fun ofRaw(raw: Int): MyPeripheralState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MyGattCharacteristicWriteType(val raw: Int) {
  WITHRESPONSE(0),
  WITHOUTRESPONSE(1);

  companion object {
    fun ofRaw(raw: Int): MyGattCharacteristicWriteType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyPeripheral (
  val id: String,
  val rssi: Long,
  val name: String? = null,
  val manufacturerSpecificData: ByteArray? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyPeripheral {
      val id = list[0] as String
      val rssi = list[1].let { if (it is Int) it.toLong() else it as Long }
      val name = list[2] as String?
      val manufacturerSpecificData = list[3] as ByteArray?
      return MyPeripheral(id, rssi, name, manufacturerSpecificData)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      rssi,
      name,
      manufacturerSpecificData,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyGattService (
  val id: String,
  val characteristics: List<MyGattCharacteristic?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyGattService {
      val id = list[0] as String
      val characteristics = list[1] as List<MyGattCharacteristic?>
      return MyGattService(id, characteristics)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      characteristics,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyGattCharacteristic (
  val id: String,
  val canRead: Boolean,
  val canWrite: Boolean,
  val canWriteWithoutResponse: Boolean,
  val canNotify: Boolean,
  val descriptors: List<MyGattDescriptor?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyGattCharacteristic {
      val id = list[0] as String
      val canRead = list[1] as Boolean
      val canWrite = list[2] as Boolean
      val canWriteWithoutResponse = list[3] as Boolean
      val canNotify = list[4] as Boolean
      val descriptors = list[5] as List<MyGattDescriptor?>
      return MyGattCharacteristic(id, canRead, canWrite, canWriteWithoutResponse, canNotify, descriptors)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      canRead,
      canWrite,
      canWriteWithoutResponse,
      canNotify,
      descriptors,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyGattDescriptor (
  val id: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyGattDescriptor {
      val id = list[0] as String
      return MyGattDescriptor(id)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object MyCentralManagerHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattCharacteristic.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattDescriptor.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattService.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MyGattCharacteristic -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MyGattDescriptor -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MyGattService -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MyCentralManagerHostApi {
  fun getState(): Long
  fun startDiscovery(callback: (Result<Unit>) -> Unit)
  fun stopDiscovery()
  fun connect(id: String, callback: (Result<Unit>) -> Unit)
  fun disconnect(id: String)
  fun discoverServices(id: String, callback: (Result<List<MyGattService>>) -> Unit)
  fun readCharacteristic(id: String, serviceId: String, characteristicId: String, callback: (Result<ByteArray>) -> Unit)
  fun writeCharacteristic(id: String, serviceId: String, characteristicId: String, value: ByteArray, type: Long, callback: (Result<Unit>) -> Unit)
  fun notifyCharacteristic(id: String, serviceId: String, characteristicId: String, value: Boolean, callback: (Result<Unit>) -> Unit)
  fun readDescriptor(id: String, serviceId: String, characteristicId: String, descriptorId: String, callback: (Result<ByteArray>) -> Unit)
  fun writeDescriptor(id: String, serviceId: String, characteristicId: String, descriptorId: String, value: ByteArray, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by MyCentralManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MyCentralManagerHostApiCodec
    }
    /** Sets up an instance of `MyCentralManagerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: MyCentralManagerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerHostApi.getState", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getState())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerHostApi.startDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.startDiscovery() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerHostApi.stopDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopDiscovery()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerHostApi.connect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            api.connect(idArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerHostApi.disconnect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.disconnect(idArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerHostApi.discoverServices", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            api.discoverServices(idArg) { result: Result<List<MyGattService>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerHostApi.readCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val serviceIdArg = args[1] as String
            val characteristicIdArg = args[2] as String
            api.readCharacteristic(idArg, serviceIdArg, characteristicIdArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerHostApi.writeCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val serviceIdArg = args[1] as String
            val characteristicIdArg = args[2] as String
            val valueArg = args[3] as ByteArray
            val typeArg = args[4].let { if (it is Int) it.toLong() else it as Long }
            api.writeCharacteristic(idArg, serviceIdArg, characteristicIdArg, valueArg, typeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerHostApi.notifyCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val serviceIdArg = args[1] as String
            val characteristicIdArg = args[2] as String
            val valueArg = args[3] as Boolean
            api.notifyCharacteristic(idArg, serviceIdArg, characteristicIdArg, valueArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerHostApi.readDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val serviceIdArg = args[1] as String
            val characteristicIdArg = args[2] as String
            val descriptorIdArg = args[3] as String
            api.readDescriptor(idArg, serviceIdArg, characteristicIdArg, descriptorIdArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerHostApi.writeDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val idArg = args[0] as String
            val serviceIdArg = args[1] as String
            val characteristicIdArg = args[2] as String
            val descriptorIdArg = args[3] as String
            val valueArg = args[4] as ByteArray
            api.writeDescriptor(idArg, serviceIdArg, characteristicIdArg, descriptorIdArg, valueArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object MyCentralManagerFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyPeripheral.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MyPeripheral -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class MyCentralManagerFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by MyCentralManagerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      MyCentralManagerFlutterApiCodec
    }
  }
  fun onStateChanged(stateArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerFlutterApi.onStateChanged", codec)
    channel.send(listOf(stateArg)) {
      callback()
    }
  }
  fun onDiscovered(peripheralArg: MyPeripheral, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerFlutterApi.onDiscovered", codec)
    channel.send(listOf(peripheralArg)) {
      callback()
    }
  }
  fun onPeripheralStateChanged(idArg: String, stateArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerFlutterApi.onPeripheralStateChanged", codec)
    channel.send(listOf(idArg, stateArg)) {
      callback()
    }
  }
  fun onCharacteristicValueChanged(idArg: String, serviceIdArg: String, characteristicIdArg: String, valueArg: ByteArray, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.MyCentralManagerFlutterApi.onCharacteristicValueChanged", codec)
    channel.send(listOf(idArg, serviceIdArg, characteristicIdArg, valueArg)) {
      callback()
    }
  }
}
