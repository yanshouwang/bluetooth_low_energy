// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.yanshouwang.bluetooth_low_energy_android

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class MyBluetoothLowEnergyStateArgs(val raw: Int) {
  UNKNOWN(0),
  UNSUPPORTED(1),
  UNAUTHORIZED(2),
  POWEREDOFF(3),
  POWEREDON(4);

  companion object {
    fun ofRaw(raw: Int): MyBluetoothLowEnergyStateArgs? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MyGattCharacteristicPropertyArgs(val raw: Int) {
  READ(0),
  WRITE(1),
  WRITEWITHOUTRESPONSE(2),
  NOTIFY(3),
  INDICATE(4);

  companion object {
    fun ofRaw(raw: Int): MyGattCharacteristicPropertyArgs? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MyGattCharacteristicWriteTypeArgs(val raw: Int) {
  WITHRESPONSE(0),
  WITHOUTRESPONSE(1);

  companion object {
    fun ofRaw(raw: Int): MyGattCharacteristicWriteTypeArgs? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyCentralManagerArgs (
  val myStateNumber: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyCentralManagerArgs {
      val myStateNumber = list[0].let { if (it is Int) it.toLong() else it as Long }
      return MyCentralManagerArgs(myStateNumber)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      myStateNumber,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyCentralArgs (
  val myKey: Long,
  val myUUID: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyCentralArgs {
      val myKey = list[0].let { if (it is Int) it.toLong() else it as Long }
      val myUUID = list[1] as String
      return MyCentralArgs(myKey, myUUID)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      myKey,
      myUUID,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyPeripheralManagerArgs (
  val myStateNumber: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyPeripheralManagerArgs {
      val myStateNumber = list[0].let { if (it is Int) it.toLong() else it as Long }
      return MyPeripheralManagerArgs(myStateNumber)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      myStateNumber,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyPeripheralArgs (
  val myKey: Long,
  val myUUID: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyPeripheralArgs {
      val myKey = list[0].let { if (it is Int) it.toLong() else it as Long }
      val myUUID = list[1] as String
      return MyPeripheralArgs(myKey, myUUID)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      myKey,
      myUUID,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyAdvertisementArgs (
  val myName: String? = null,
  val myManufacturerSpecificData: Map<Long?, ByteArray?>,
  val myServiceUUIDs: List<String?>,
  val myServiceData: Map<String?, ByteArray?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyAdvertisementArgs {
      val myName = list[0] as String?
      val myManufacturerSpecificData = list[1] as Map<Long?, ByteArray?>
      val myServiceUUIDs = list[2] as List<String?>
      val myServiceData = list[3] as Map<String?, ByteArray?>
      return MyAdvertisementArgs(myName, myManufacturerSpecificData, myServiceUUIDs, myServiceData)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      myName,
      myManufacturerSpecificData,
      myServiceUUIDs,
      myServiceData,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyGattServiceArgs (
  val myKey: Long,
  val myUUID: String,
  val myCharacteristicArgses: List<MyGattCharacteristicArgs?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyGattServiceArgs {
      val myKey = list[0].let { if (it is Int) it.toLong() else it as Long }
      val myUUID = list[1] as String
      val myCharacteristicArgses = list[2] as List<MyGattCharacteristicArgs?>
      return MyGattServiceArgs(myKey, myUUID, myCharacteristicArgses)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      myKey,
      myUUID,
      myCharacteristicArgses,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyGattCharacteristicArgs (
  val myKey: Long,
  val myUUID: String,
  val myPropertyNumbers: List<Long?>,
  val myDescriptorArgses: List<MyGattDescriptorArgs?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyGattCharacteristicArgs {
      val myKey = list[0].let { if (it is Int) it.toLong() else it as Long }
      val myUUID = list[1] as String
      val myPropertyNumbers = list[2] as List<Long?>
      val myDescriptorArgses = list[3] as List<MyGattDescriptorArgs?>
      return MyGattCharacteristicArgs(myKey, myUUID, myPropertyNumbers, myDescriptorArgses)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      myKey,
      myUUID,
      myPropertyNumbers,
      myDescriptorArgses,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyGattDescriptorArgs (
  val myKey: Long,
  val myUUID: String,
  val myValue: ByteArray

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyGattDescriptorArgs {
      val myKey = list[0].let { if (it is Int) it.toLong() else it as Long }
      val myUUID = list[1] as String
      val myValue = list[2] as ByteArray
      return MyGattDescriptorArgs(myKey, myUUID, myValue)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      myKey,
      myUUID,
      myValue,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object MyCentralManagerHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyCentralManagerArgs.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattCharacteristicArgs.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattDescriptorArgs.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattServiceArgs.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MyCentralManagerArgs -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MyGattCharacteristicArgs -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MyGattDescriptorArgs -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is MyGattServiceArgs -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MyCentralManagerHostApi {
  fun setUp(callback: (Result<MyCentralManagerArgs>) -> Unit)
  fun startDiscovery(callback: (Result<Unit>) -> Unit)
  fun stopDiscovery()
  fun connect(myPeripheralKey: Long, callback: (Result<Unit>) -> Unit)
  fun disconnect(myPeripheralKey: Long, callback: (Result<Unit>) -> Unit)
  fun getMaximumWriteLength(myPeripheralKey: Long, callback: (Result<Long>) -> Unit)
  fun readRSSI(myPeripheralKey: Long, callback: (Result<Long>) -> Unit)
  fun discoverGATT(myPeripheralKey: Long, callback: (Result<List<MyGattServiceArgs>>) -> Unit)
  fun readCharacteristic(myPeripheralKey: Long, myCharacteristicKey: Long, callback: (Result<ByteArray>) -> Unit)
  fun writeCharacteristic(myPeripheralKey: Long, myCharacteristicKey: Long, myValue: ByteArray, myTypeNumber: Long, callback: (Result<Unit>) -> Unit)
  fun notifyCharacteristic(myPeripheralKey: Long, myCharacteristicKey: Long, myState: Boolean, callback: (Result<Unit>) -> Unit)
  fun readDescriptor(myPeripheralKey: Long, myDescriptorKey: Long, callback: (Result<ByteArray>) -> Unit)
  fun writeDescriptor(myPeripheralKey: Long, myDescriptorKey: Long, myValue: ByteArray, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by MyCentralManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MyCentralManagerHostApiCodec
    }
    /** Sets up an instance of `MyCentralManagerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: MyCentralManagerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.setUp", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.setUp() { result: Result<MyCentralManagerArgs> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.startDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.startDiscovery() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.stopDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopDiscovery()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.connect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myPeripheralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.connect(myPeripheralKeyArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.disconnect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myPeripheralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.disconnect(myPeripheralKeyArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.getMaximumWriteLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myPeripheralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.getMaximumWriteLength(myPeripheralKeyArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.readRSSI", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myPeripheralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.readRSSI(myPeripheralKeyArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.discoverGATT", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myPeripheralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.discoverGATT(myPeripheralKeyArg) { result: Result<List<MyGattServiceArgs>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.readCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myPeripheralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val myCharacteristicKeyArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.readCharacteristic(myPeripheralKeyArg, myCharacteristicKeyArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.writeCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myPeripheralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val myCharacteristicKeyArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val myValueArg = args[2] as ByteArray
            val myTypeNumberArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            api.writeCharacteristic(myPeripheralKeyArg, myCharacteristicKeyArg, myValueArg, myTypeNumberArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.notifyCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myPeripheralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val myCharacteristicKeyArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val myStateArg = args[2] as Boolean
            api.notifyCharacteristic(myPeripheralKeyArg, myCharacteristicKeyArg, myStateArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.readDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myPeripheralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val myDescriptorKeyArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.readDescriptor(myPeripheralKeyArg, myDescriptorKeyArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.writeDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myPeripheralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val myDescriptorKeyArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val myValueArg = args[2] as ByteArray
            api.writeDescriptor(myPeripheralKeyArg, myDescriptorKeyArg, myValueArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object MyCentralManagerFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyAdvertisementArgs.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattCharacteristicArgs.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattDescriptorArgs.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyPeripheralArgs.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MyAdvertisementArgs -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MyGattCharacteristicArgs -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MyGattDescriptorArgs -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is MyPeripheralArgs -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class MyCentralManagerFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by MyCentralManagerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      MyCentralManagerFlutterApiCodec
    }
  }
  fun onStateChanged(myStateNumberArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerFlutterApi.onStateChanged", codec)
    channel.send(listOf(myStateNumberArg)) {
      callback()
    }
  }
  fun onDiscovered(myPeripheralArgsArg: MyPeripheralArgs, myRSSIArg: Long, myAdvertisementArgsArg: MyAdvertisementArgs, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerFlutterApi.onDiscovered", codec)
    channel.send(listOf(myPeripheralArgsArg, myRSSIArg, myAdvertisementArgsArg)) {
      callback()
    }
  }
  fun onPeripheralStateChanged(myPeripheralArgsArg: MyPeripheralArgs, myStateArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerFlutterApi.onPeripheralStateChanged", codec)
    channel.send(listOf(myPeripheralArgsArg, myStateArg)) {
      callback()
    }
  }
  fun onCharacteristicValueChanged(myCharacteristicArgsArg: MyGattCharacteristicArgs, myValueArg: ByteArray, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerFlutterApi.onCharacteristicValueChanged", codec)
    channel.send(listOf(myCharacteristicArgsArg, myValueArg)) {
      callback()
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object MyPeripheralManagerHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyAdvertisementArgs.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattCharacteristicArgs.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattDescriptorArgs.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattServiceArgs.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyPeripheralManagerArgs.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MyAdvertisementArgs -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MyGattCharacteristicArgs -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MyGattDescriptorArgs -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is MyGattServiceArgs -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is MyPeripheralManagerArgs -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MyPeripheralManagerHostApi {
  fun setUp(callback: (Result<MyPeripheralManagerArgs>) -> Unit)
  fun addService(myServiceArgs: MyGattServiceArgs, callback: (Result<Unit>) -> Unit)
  fun removeService(myServiceKey: Long)
  fun clearServices()
  fun startAdvertising(myAdvertisementArgs: MyAdvertisementArgs, callback: (Result<Unit>) -> Unit)
  fun stopAdvertising()
  fun getMaximumWriteLength(myCentralKey: Long): Long
  fun sendReadCharacteristicReply(myCentralKey: Long, myCharacteristicKey: Long, myId: Long, myOffset: Long, myStatus: Boolean, myValue: ByteArray)
  fun sendWriteCharacteristicReply(myCentralKey: Long, myCharacteristicKey: Long, myId: Long, myOffset: Long, myStatus: Boolean)
  fun notifyCharacteristicValueChanged(myCentralKey: Long, myCharacteristicKey: Long, myValue: ByteArray, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by MyPeripheralManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MyPeripheralManagerHostApiCodec
    }
    /** Sets up an instance of `MyPeripheralManagerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: MyPeripheralManagerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.setUp", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.setUp() { result: Result<MyPeripheralManagerArgs> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.addService", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myServiceArgsArg = args[0] as MyGattServiceArgs
            api.addService(myServiceArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.removeService", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myServiceKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.removeService(myServiceKeyArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.clearServices", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.clearServices()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.startAdvertising", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myAdvertisementArgsArg = args[0] as MyAdvertisementArgs
            api.startAdvertising(myAdvertisementArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.stopAdvertising", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopAdvertising()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.getMaximumWriteLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myCentralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getMaximumWriteLength(myCentralKeyArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.sendReadCharacteristicReply", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myCentralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val myCharacteristicKeyArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val myIdArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val myOffsetArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            val myStatusArg = args[4] as Boolean
            val myValueArg = args[5] as ByteArray
            var wrapped: List<Any?>
            try {
              api.sendReadCharacteristicReply(myCentralKeyArg, myCharacteristicKeyArg, myIdArg, myOffsetArg, myStatusArg, myValueArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.sendWriteCharacteristicReply", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myCentralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val myCharacteristicKeyArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val myIdArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val myOffsetArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            val myStatusArg = args[4] as Boolean
            var wrapped: List<Any?>
            try {
              api.sendWriteCharacteristicReply(myCentralKeyArg, myCharacteristicKeyArg, myIdArg, myOffsetArg, myStatusArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.notifyCharacteristicValueChanged", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val myCentralKeyArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val myCharacteristicKeyArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val myValueArg = args[2] as ByteArray
            api.notifyCharacteristicValueChanged(myCentralKeyArg, myCharacteristicKeyArg, myValueArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object MyPeripheralManagerFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyCentralArgs.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattCharacteristicArgs.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattDescriptorArgs.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MyCentralArgs -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MyGattCharacteristicArgs -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MyGattDescriptorArgs -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class MyPeripheralManagerFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by MyPeripheralManagerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      MyPeripheralManagerFlutterApiCodec
    }
  }
  fun onStateChanged(myStateNumberArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerFlutterApi.onStateChanged", codec)
    channel.send(listOf(myStateNumberArg)) {
      callback()
    }
  }
  fun onReadCharacteristicCommandReceived(myCentralArgsArg: MyCentralArgs, myCharacteristicArgsArg: MyGattCharacteristicArgs, myIdArg: Long, myOffsetArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerFlutterApi.onReadCharacteristicCommandReceived", codec)
    channel.send(listOf(myCentralArgsArg, myCharacteristicArgsArg, myIdArg, myOffsetArg)) {
      callback()
    }
  }
  fun onWriteCharacteristicCommandReceived(myCentralArgsArg: MyCentralArgs, myCharacteristicArgsArg: MyGattCharacteristicArgs, myIdArg: Long, myOffsetArg: Long, myValueArg: ByteArray, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerFlutterApi.onWriteCharacteristicCommandReceived", codec)
    channel.send(listOf(myCentralArgsArg, myCharacteristicArgsArg, myIdArg, myOffsetArg, myValueArg)) {
      callback()
    }
  }
  fun onNotifyCharacteristicCommandReceived(myCentralArgsArg: MyCentralArgs, myCharacteristicArgsArg: MyGattCharacteristicArgs, myStateArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerFlutterApi.onNotifyCharacteristicCommandReceived", codec)
    channel.send(listOf(myCentralArgsArg, myCharacteristicArgsArg, myStateArg)) {
      callback()
    }
  }
}
