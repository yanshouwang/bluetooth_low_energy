// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package dev.yanshouwang.bluetooth_low_energy_android

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class MyBluetoothLowEnergyStateArgs(val raw: Int) {
  UNKNOWN(0),
  UNSUPPORTED(1),
  UNAUTHORIZED(2),
  POWEREDOFF(3),
  POWEREDON(4);

  companion object {
    fun ofRaw(raw: Int): MyBluetoothLowEnergyStateArgs? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MyGattCharacteristicPropertyArgs(val raw: Int) {
  READ(0),
  WRITE(1),
  WRITEWITHOUTRESPONSE(2),
  NOTIFY(3),
  INDICATE(4);

  companion object {
    fun ofRaw(raw: Int): MyGattCharacteristicPropertyArgs? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class MyGattCharacteristicWriteTypeArgs(val raw: Int) {
  WITHRESPONSE(0),
  WITHOUTRESPONSE(1);

  companion object {
    fun ofRaw(raw: Int): MyGattCharacteristicWriteTypeArgs? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyCentralManagerArgs (
  val stateNumberArgs: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyCentralManagerArgs {
      val stateNumberArgs = list[0].let { if (it is Int) it.toLong() else it as Long }
      return MyCentralManagerArgs(stateNumberArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      stateNumberArgs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyPeripheralManagerArgs (
  val stateNumberArgs: Long

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyPeripheralManagerArgs {
      val stateNumberArgs = list[0].let { if (it is Int) it.toLong() else it as Long }
      return MyPeripheralManagerArgs(stateNumberArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      stateNumberArgs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyCentralArgs (
  val hashCodeArgs: Long,
  val uuidArgs: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyCentralArgs {
      val hashCodeArgs = list[0].let { if (it is Int) it.toLong() else it as Long }
      val uuidArgs = list[1] as String
      return MyCentralArgs(hashCodeArgs, uuidArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      hashCodeArgs,
      uuidArgs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyPeripheralArgs (
  val hashCodeArgs: Long,
  val uuidArgs: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyPeripheralArgs {
      val hashCodeArgs = list[0].let { if (it is Int) it.toLong() else it as Long }
      val uuidArgs = list[1] as String
      return MyPeripheralArgs(hashCodeArgs, uuidArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      hashCodeArgs,
      uuidArgs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyAdvertiseDataArgs (
  val nameArgs: String? = null,
  val serviceUUIDsArgs: List<String?>,
  val serviceDataArgs: Map<String?, ByteArray?>,
  val manufacturerSpecificDataArgs: MyManufacturerSpecificDataArgs? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyAdvertiseDataArgs {
      val nameArgs = list[0] as String?
      val serviceUUIDsArgs = list[1] as List<String?>
      val serviceDataArgs = list[2] as Map<String?, ByteArray?>
      val manufacturerSpecificDataArgs: MyManufacturerSpecificDataArgs? = (list[3] as List<Any?>?)?.let {
        MyManufacturerSpecificDataArgs.fromList(it)
      }
      return MyAdvertiseDataArgs(nameArgs, serviceUUIDsArgs, serviceDataArgs, manufacturerSpecificDataArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      nameArgs,
      serviceUUIDsArgs,
      serviceDataArgs,
      manufacturerSpecificDataArgs?.toList(),
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyManufacturerSpecificDataArgs (
  val idArgs: Long,
  val dataArgs: ByteArray

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyManufacturerSpecificDataArgs {
      val idArgs = list[0].let { if (it is Int) it.toLong() else it as Long }
      val dataArgs = list[1] as ByteArray
      return MyManufacturerSpecificDataArgs(idArgs, dataArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      idArgs,
      dataArgs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyGattServiceArgs (
  val hashCodeArgs: Long,
  val uuidArgs: String,
  val characteristicsArgs: List<MyGattCharacteristicArgs?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyGattServiceArgs {
      val hashCodeArgs = list[0].let { if (it is Int) it.toLong() else it as Long }
      val uuidArgs = list[1] as String
      val characteristicsArgs = list[2] as List<MyGattCharacteristicArgs?>
      return MyGattServiceArgs(hashCodeArgs, uuidArgs, characteristicsArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      hashCodeArgs,
      uuidArgs,
      characteristicsArgs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyGattCharacteristicArgs (
  val hashCodeArgs: Long,
  val uuidArgs: String,
  val propertyNumbersArgs: List<Long?>,
  val descriptorsArgs: List<MyGattDescriptorArgs?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyGattCharacteristicArgs {
      val hashCodeArgs = list[0].let { if (it is Int) it.toLong() else it as Long }
      val uuidArgs = list[1] as String
      val propertyNumbersArgs = list[2] as List<Long?>
      val descriptorsArgs = list[3] as List<MyGattDescriptorArgs?>
      return MyGattCharacteristicArgs(hashCodeArgs, uuidArgs, propertyNumbersArgs, descriptorsArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      hashCodeArgs,
      uuidArgs,
      propertyNumbersArgs,
      descriptorsArgs,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class MyGattDescriptorArgs (
  val hashCodeArgs: Long,
  val uuidArgs: String,
  val valueArgs: ByteArray? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): MyGattDescriptorArgs {
      val hashCodeArgs = list[0].let { if (it is Int) it.toLong() else it as Long }
      val uuidArgs = list[1] as String
      val valueArgs = list[2] as ByteArray?
      return MyGattDescriptorArgs(hashCodeArgs, uuidArgs, valueArgs)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      hashCodeArgs,
      uuidArgs,
      valueArgs,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object MyCentralManagerHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyCentralManagerArgs.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattCharacteristicArgs.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattDescriptorArgs.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattServiceArgs.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MyCentralManagerArgs -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MyGattCharacteristicArgs -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MyGattDescriptorArgs -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is MyGattServiceArgs -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MyCentralManagerHostApi {
  fun setUp(callback: (Result<MyCentralManagerArgs>) -> Unit)
  fun startDiscovery(callback: (Result<Unit>) -> Unit)
  fun stopDiscovery()
  fun connect(peripheralHashCodeArgs: Long, callback: (Result<Unit>) -> Unit)
  fun disconnect(peripheralHashCodeArgs: Long, callback: (Result<Unit>) -> Unit)
  fun getMaximumWriteLength(peripheralHashCodeArgs: Long, typeNumberArgs: Long): Long
  fun readRSSI(peripheralHashCodeArgs: Long, callback: (Result<Long>) -> Unit)
  fun discoverGATT(peripheralHashCodeArgs: Long, callback: (Result<List<MyGattServiceArgs>>) -> Unit)
  fun requestMTU(peripheralHashCodeArgs: Long, mtuArgs: Long, callback: (Result<Long>) -> Unit)
  fun readCharacteristic(peripheralHashCodeArgs: Long, characteristicHashCodeArgs: Long, callback: (Result<ByteArray>) -> Unit)
  fun writeCharacteristic(peripheralHashCodeArgs: Long, characteristicHashCodeArgs: Long, valueArgs: ByteArray, typeNumberArgs: Long, callback: (Result<Unit>) -> Unit)
  fun notifyCharacteristic(peripheralHashCodeArgs: Long, characteristicHashCodeArgs: Long, stateArgs: Boolean, callback: (Result<Unit>) -> Unit)
  fun readDescriptor(peripheralHashCodeArgs: Long, descriptorHashCodeArgs: Long, callback: (Result<ByteArray>) -> Unit)
  fun writeDescriptor(peripheralHashCodeArgs: Long, descriptorHashCodeArgs: Long, valueArgs: ByteArray, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by MyCentralManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MyCentralManagerHostApiCodec
    }
    /** Sets up an instance of `MyCentralManagerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: MyCentralManagerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.setUp", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.setUp() { result: Result<MyCentralManagerArgs> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.startDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.startDiscovery() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.stopDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopDiscovery()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.connect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peripheralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.connect(peripheralHashCodeArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.disconnect", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peripheralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.disconnect(peripheralHashCodeArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.getMaximumWriteLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peripheralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val typeNumberArgsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getMaximumWriteLength(peripheralHashCodeArgsArg, typeNumberArgsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.readRSSI", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peripheralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.readRSSI(peripheralHashCodeArgsArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.discoverGATT", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peripheralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            api.discoverGATT(peripheralHashCodeArgsArg) { result: Result<List<MyGattServiceArgs>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.requestMTU", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peripheralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val mtuArgsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.requestMTU(peripheralHashCodeArgsArg, mtuArgsArg) { result: Result<Long> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.readCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peripheralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val characteristicHashCodeArgsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.readCharacteristic(peripheralHashCodeArgsArg, characteristicHashCodeArgsArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.writeCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peripheralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val characteristicHashCodeArgsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val valueArgsArg = args[2] as ByteArray
            val typeNumberArgsArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            api.writeCharacteristic(peripheralHashCodeArgsArg, characteristicHashCodeArgsArg, valueArgsArg, typeNumberArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.notifyCharacteristic", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peripheralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val characteristicHashCodeArgsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val stateArgsArg = args[2] as Boolean
            api.notifyCharacteristic(peripheralHashCodeArgsArg, characteristicHashCodeArgsArg, stateArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.readDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peripheralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val descriptorHashCodeArgsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            api.readDescriptor(peripheralHashCodeArgsArg, descriptorHashCodeArgsArg) { result: Result<ByteArray> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerHostApi.writeDescriptor", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val peripheralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val descriptorHashCodeArgsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val valueArgsArg = args[2] as ByteArray
            api.writeDescriptor(peripheralHashCodeArgsArg, descriptorHashCodeArgsArg, valueArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object MyCentralManagerFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyAdvertiseDataArgs.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattCharacteristicArgs.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattDescriptorArgs.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyManufacturerSpecificDataArgs.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyPeripheralArgs.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MyAdvertiseDataArgs -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MyGattCharacteristicArgs -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MyGattDescriptorArgs -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is MyManufacturerSpecificDataArgs -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is MyPeripheralArgs -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class MyCentralManagerFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by MyCentralManagerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      MyCentralManagerFlutterApiCodec
    }
  }
  fun onStateChanged(stateNumberArgsArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerFlutterApi.onStateChanged", codec)
    channel.send(listOf(stateNumberArgsArg)) {
      callback()
    }
  }
  fun onDiscovered(peripheralArgsArg: MyPeripheralArgs, rssiArgsArg: Long, advertiseDataArgsArg: MyAdvertiseDataArgs, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerFlutterApi.onDiscovered", codec)
    channel.send(listOf(peripheralArgsArg, rssiArgsArg, advertiseDataArgsArg)) {
      callback()
    }
  }
  fun onPeripheralStateChanged(peripheralArgsArg: MyPeripheralArgs, stateArgsArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerFlutterApi.onPeripheralStateChanged", codec)
    channel.send(listOf(peripheralArgsArg, stateArgsArg)) {
      callback()
    }
  }
  fun onCharacteristicValueChanged(characteristicArgsArg: MyGattCharacteristicArgs, valueArgsArg: ByteArray, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyCentralManagerFlutterApi.onCharacteristicValueChanged", codec)
    channel.send(listOf(characteristicArgsArg, valueArgsArg)) {
      callback()
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object MyPeripheralManagerHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyAdvertiseDataArgs.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattCharacteristicArgs.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattDescriptorArgs.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattServiceArgs.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyManufacturerSpecificDataArgs.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyPeripheralManagerArgs.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MyAdvertiseDataArgs -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MyGattCharacteristicArgs -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MyGattDescriptorArgs -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is MyGattServiceArgs -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is MyManufacturerSpecificDataArgs -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is MyPeripheralManagerArgs -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface MyPeripheralManagerHostApi {
  fun setUp(callback: (Result<MyPeripheralManagerArgs>) -> Unit)
  fun addService(serviceArgs: MyGattServiceArgs, callback: (Result<Unit>) -> Unit)
  fun removeService(serviceHashCodeArgs: Long)
  fun clearServices()
  fun startAdvertising(advertiseDataArgs: MyAdvertiseDataArgs, callback: (Result<Unit>) -> Unit)
  fun stopAdvertising()
  fun getMaximumWriteLength(centralHashCodeArgs: Long): Long
  fun sendReadCharacteristicReply(centralHashCodeArgs: Long, characteristicHashCodeArgs: Long, idArgs: Long, offsetArgs: Long, statusArgs: Boolean, valueArgs: ByteArray)
  fun sendWriteCharacteristicReply(centralHashCodeArgs: Long, characteristicHashCodeArgs: Long, idArgs: Long, offsetArgs: Long, statusArgs: Boolean)
  fun notifyCharacteristicValueChanged(centralHashCodeArgs: Long, characteristicHashCodeArgs: Long, valueArgs: ByteArray, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by MyPeripheralManagerHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      MyPeripheralManagerHostApiCodec
    }
    /** Sets up an instance of `MyPeripheralManagerHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: MyPeripheralManagerHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.setUp", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.setUp() { result: Result<MyPeripheralManagerArgs> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.addService", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val serviceArgsArg = args[0] as MyGattServiceArgs
            api.addService(serviceArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.removeService", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val serviceHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              api.removeService(serviceHashCodeArgsArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.clearServices", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.clearServices()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.startAdvertising", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val advertiseDataArgsArg = args[0] as MyAdvertiseDataArgs
            api.startAdvertising(advertiseDataArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.stopAdvertising", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopAdvertising()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.getMaximumWriteLength", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val centralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getMaximumWriteLength(centralHashCodeArgsArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.sendReadCharacteristicReply", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val centralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val characteristicHashCodeArgsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val idArgsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val offsetArgsArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            val statusArgsArg = args[4] as Boolean
            val valueArgsArg = args[5] as ByteArray
            var wrapped: List<Any?>
            try {
              api.sendReadCharacteristicReply(centralHashCodeArgsArg, characteristicHashCodeArgsArg, idArgsArg, offsetArgsArg, statusArgsArg, valueArgsArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.sendWriteCharacteristicReply", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val centralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val characteristicHashCodeArgsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val idArgsArg = args[2].let { if (it is Int) it.toLong() else it as Long }
            val offsetArgsArg = args[3].let { if (it is Int) it.toLong() else it as Long }
            val statusArgsArg = args[4] as Boolean
            var wrapped: List<Any?>
            try {
              api.sendWriteCharacteristicReply(centralHashCodeArgsArg, characteristicHashCodeArgsArg, idArgsArg, offsetArgsArg, statusArgsArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerHostApi.notifyCharacteristicValueChanged", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val centralHashCodeArgsArg = args[0].let { if (it is Int) it.toLong() else it as Long }
            val characteristicHashCodeArgsArg = args[1].let { if (it is Int) it.toLong() else it as Long }
            val valueArgsArg = args[2] as ByteArray
            api.notifyCharacteristicValueChanged(centralHashCodeArgsArg, characteristicHashCodeArgsArg, valueArgsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object MyPeripheralManagerFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyCentralArgs.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattCharacteristicArgs.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          MyGattDescriptorArgs.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is MyCentralArgs -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is MyGattCharacteristicArgs -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is MyGattDescriptorArgs -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class MyPeripheralManagerFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by MyPeripheralManagerFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      MyPeripheralManagerFlutterApiCodec
    }
  }
  fun onStateChanged(stateNumberArgsArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerFlutterApi.onStateChanged", codec)
    channel.send(listOf(stateNumberArgsArg)) {
      callback()
    }
  }
  fun onReadCharacteristicCommandReceived(centralArgsArg: MyCentralArgs, characteristicArgsArg: MyGattCharacteristicArgs, idArgsArg: Long, offsetArgsArg: Long, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerFlutterApi.onReadCharacteristicCommandReceived", codec)
    channel.send(listOf(centralArgsArg, characteristicArgsArg, idArgsArg, offsetArgsArg)) {
      callback()
    }
  }
  fun onWriteCharacteristicCommandReceived(centralArgsArg: MyCentralArgs, characteristicArgsArg: MyGattCharacteristicArgs, idArgsArg: Long, offsetArgsArg: Long, valueArgsArg: ByteArray, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerFlutterApi.onWriteCharacteristicCommandReceived", codec)
    channel.send(listOf(centralArgsArg, characteristicArgsArg, idArgsArg, offsetArgsArg, valueArgsArg)) {
      callback()
    }
  }
  fun onNotifyCharacteristicCommandReceived(centralArgsArg: MyCentralArgs, characteristicArgsArg: MyGattCharacteristicArgs, stateArgsArg: Boolean, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.bluetooth_low_energy_android.MyPeripheralManagerFlutterApi.onNotifyCharacteristicCommandReceived", codec)
    channel.send(listOf(centralArgsArg, characteristicArgsArg, stateArgsArg)) {
      callback()
    }
  }
}
