// Autogenerated from Pigeon (v19.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum MyBluetoothLowEnergyStateArgs {
  unknown,
  unsupported,
  disabled,
  off,
  on,
}

enum MyAdvertisementTypeArgs {
  connectableUndirected,
  connectableDirected,
  scannableUndirected,
  nonConnectableUndirected,
  scanResponse,
  extended,
}

enum MyConnectionStateArgs {
  disconnected,
  connected,
}

enum MyGATTCharacteristicPropertyArgs {
  read,
  write,
  writeWithoutResponse,
  notify,
  indicate,
}

enum MyGATTCharacteristicWriteTypeArgs {
  withResponse,
  withoutResponse,
}

enum MyGATTCharacteristicNotifyStateArgs {
  none,
  notify,
  indicate,
}

enum MyGATTProtectionLevelArgs {
  plain,
  authenticationRequired,
  entryptionRequired,
  encryptionAndAuthenticationRequired,
}

enum MyGATTProtocolErrorArgs {
  invalidHandle,
  readNotPermitted,
  writeNotPermitted,
  invalidPDU,
  insufficientAuthentication,
  requestNotSupported,
  invalidOffset,
  insufficientAuthorization,
  prepareQueueFull,
  attributeNotFound,
  attributeNotLong,
  insufficientEncryptionKeySize,
  invalidAttributeValueLength,
  unlikelyError,
  insufficientEncryption,
  unsupportedGroupType,
  insufficientResources,
}

enum MyCacheModeArgs {
  cached,
  uncached,
}

class MyManufacturerSpecificDataArgs {
  MyManufacturerSpecificDataArgs({
    required this.idArgs,
    required this.dataArgs,
  });

  int idArgs;

  Uint8List dataArgs;

  Object encode() {
    return <Object?>[
      idArgs,
      dataArgs,
    ];
  }

  static MyManufacturerSpecificDataArgs decode(Object result) {
    result as List<Object?>;
    return MyManufacturerSpecificDataArgs(
      idArgs: result[0]! as int,
      dataArgs: result[1]! as Uint8List,
    );
  }
}

class MyAdvertisementArgs {
  MyAdvertisementArgs({
    this.nameArgs,
    required this.serviceUUIDsArgs,
    required this.serviceDataArgs,
    required this.manufacturerSpecificDataArgs,
  });

  String? nameArgs;

  List<String?> serviceUUIDsArgs;

  Map<String?, Uint8List?> serviceDataArgs;

  List<MyManufacturerSpecificDataArgs?> manufacturerSpecificDataArgs;

  Object encode() {
    return <Object?>[
      nameArgs,
      serviceUUIDsArgs,
      serviceDataArgs,
      manufacturerSpecificDataArgs,
    ];
  }

  static MyAdvertisementArgs decode(Object result) {
    result as List<Object?>;
    return MyAdvertisementArgs(
      nameArgs: result[0] as String?,
      serviceUUIDsArgs: (result[1] as List<Object?>?)!.cast<String?>(),
      serviceDataArgs: (result[2] as Map<Object?, Object?>?)!.cast<String?, Uint8List?>(),
      manufacturerSpecificDataArgs: (result[3] as List<Object?>?)!.cast<MyManufacturerSpecificDataArgs?>(),
    );
  }
}

class MyCentralArgs {
  MyCentralArgs({
    required this.addressArgs,
  });

  int addressArgs;

  Object encode() {
    return <Object?>[
      addressArgs,
    ];
  }

  static MyCentralArgs decode(Object result) {
    result as List<Object?>;
    return MyCentralArgs(
      addressArgs: result[0]! as int,
    );
  }
}

class MyPeripheralArgs {
  MyPeripheralArgs({
    required this.addressArgs,
  });

  int addressArgs;

  Object encode() {
    return <Object?>[
      addressArgs,
    ];
  }

  static MyPeripheralArgs decode(Object result) {
    result as List<Object?>;
    return MyPeripheralArgs(
      addressArgs: result[0]! as int,
    );
  }
}

class MyGATTDescriptorArgs {
  MyGATTDescriptorArgs({
    required this.handleArgs,
    required this.uuidArgs,
  });

  int handleArgs;

  String uuidArgs;

  Object encode() {
    return <Object?>[
      handleArgs,
      uuidArgs,
    ];
  }

  static MyGATTDescriptorArgs decode(Object result) {
    result as List<Object?>;
    return MyGATTDescriptorArgs(
      handleArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
    );
  }
}

class MyGATTCharacteristicArgs {
  MyGATTCharacteristicArgs({
    required this.handleArgs,
    required this.uuidArgs,
    required this.propertyNumbersArgs,
    required this.descriptorsArgs,
  });

  int handleArgs;

  String uuidArgs;

  List<int?> propertyNumbersArgs;

  List<MyGATTDescriptorArgs?> descriptorsArgs;

  Object encode() {
    return <Object?>[
      handleArgs,
      uuidArgs,
      propertyNumbersArgs,
      descriptorsArgs,
    ];
  }

  static MyGATTCharacteristicArgs decode(Object result) {
    result as List<Object?>;
    return MyGATTCharacteristicArgs(
      handleArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      propertyNumbersArgs: (result[2] as List<Object?>?)!.cast<int?>(),
      descriptorsArgs: (result[3] as List<Object?>?)!.cast<MyGATTDescriptorArgs?>(),
    );
  }
}

class MyGATTServiceArgs {
  MyGATTServiceArgs({
    required this.handleArgs,
    required this.uuidArgs,
    required this.isPrimaryArgs,
    required this.includedServicesArgs,
    required this.characteristicsArgs,
  });

  int handleArgs;

  String uuidArgs;

  bool isPrimaryArgs;

  List<MyGATTServiceArgs?> includedServicesArgs;

  List<MyGATTCharacteristicArgs?> characteristicsArgs;

  Object encode() {
    return <Object?>[
      handleArgs,
      uuidArgs,
      isPrimaryArgs,
      includedServicesArgs,
      characteristicsArgs,
    ];
  }

  static MyGATTServiceArgs decode(Object result) {
    result as List<Object?>;
    return MyGATTServiceArgs(
      handleArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      isPrimaryArgs: result[2]! as bool,
      includedServicesArgs: (result[3] as List<Object?>?)!.cast<MyGATTServiceArgs?>(),
      characteristicsArgs: (result[4] as List<Object?>?)!.cast<MyGATTCharacteristicArgs?>(),
    );
  }
}

class MyMutableGATTDescriptorArgs {
  MyMutableGATTDescriptorArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
    this.valueArgs,
    this.readProtectionLevelArgs,
    this.writeProtectionLevelArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  Uint8List? valueArgs;

  MyGATTProtectionLevelArgs? readProtectionLevelArgs;

  MyGATTProtectionLevelArgs? writeProtectionLevelArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
      valueArgs,
      readProtectionLevelArgs?.index,
      writeProtectionLevelArgs?.index,
    ];
  }

  static MyMutableGATTDescriptorArgs decode(Object result) {
    result as List<Object?>;
    return MyMutableGATTDescriptorArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      valueArgs: result[2] as Uint8List?,
      readProtectionLevelArgs: result[3] != null
          ? MyGATTProtectionLevelArgs.values[result[3]! as int]
          : null,
      writeProtectionLevelArgs: result[4] != null
          ? MyGATTProtectionLevelArgs.values[result[4]! as int]
          : null,
    );
  }
}

class MyMutableGATTCharacteristicArgs {
  MyMutableGATTCharacteristicArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
    this.valueArgs,
    required this.propertyNumbersArgs,
    this.readProtectionLevelArgs,
    this.writeProtectionLevelArgs,
    required this.descriptorsArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  Uint8List? valueArgs;

  List<int?> propertyNumbersArgs;

  MyGATTProtectionLevelArgs? readProtectionLevelArgs;

  MyGATTProtectionLevelArgs? writeProtectionLevelArgs;

  List<MyMutableGATTDescriptorArgs?> descriptorsArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
      valueArgs,
      propertyNumbersArgs,
      readProtectionLevelArgs?.index,
      writeProtectionLevelArgs?.index,
      descriptorsArgs,
    ];
  }

  static MyMutableGATTCharacteristicArgs decode(Object result) {
    result as List<Object?>;
    return MyMutableGATTCharacteristicArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      valueArgs: result[2] as Uint8List?,
      propertyNumbersArgs: (result[3] as List<Object?>?)!.cast<int?>(),
      readProtectionLevelArgs: result[4] != null
          ? MyGATTProtectionLevelArgs.values[result[4]! as int]
          : null,
      writeProtectionLevelArgs: result[5] != null
          ? MyGATTProtectionLevelArgs.values[result[5]! as int]
          : null,
      descriptorsArgs: (result[6] as List<Object?>?)!.cast<MyMutableGATTDescriptorArgs?>(),
    );
  }
}

class MyMutableGATTServiceArgs {
  MyMutableGATTServiceArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
    required this.isPrimaryArgs,
    required this.includedServicesArgs,
    required this.characteristicsArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  bool isPrimaryArgs;

  List<MyMutableGATTServiceArgs?> includedServicesArgs;

  List<MyMutableGATTCharacteristicArgs?> characteristicsArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
      isPrimaryArgs,
      includedServicesArgs,
      characteristicsArgs,
    ];
  }

  static MyMutableGATTServiceArgs decode(Object result) {
    result as List<Object?>;
    return MyMutableGATTServiceArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      isPrimaryArgs: result[2]! as bool,
      includedServicesArgs: (result[3] as List<Object?>?)!.cast<MyMutableGATTServiceArgs?>(),
      characteristicsArgs: (result[4] as List<Object?>?)!.cast<MyMutableGATTCharacteristicArgs?>(),
    );
  }
}

class MyGATTReadRequestArgs {
  MyGATTReadRequestArgs({
    required this.idArgs,
    required this.offsetArgs,
    required this.lengthArgs,
  });

  int idArgs;

  int offsetArgs;

  int lengthArgs;

  Object encode() {
    return <Object?>[
      idArgs,
      offsetArgs,
      lengthArgs,
    ];
  }

  static MyGATTReadRequestArgs decode(Object result) {
    result as List<Object?>;
    return MyGATTReadRequestArgs(
      idArgs: result[0]! as int,
      offsetArgs: result[1]! as int,
      lengthArgs: result[2]! as int,
    );
  }
}

class MyGATTWriteRequestArgs {
  MyGATTWriteRequestArgs({
    required this.idArgs,
    required this.offsetArgs,
    required this.valueArgs,
    required this.typeArgs,
  });

  int idArgs;

  int offsetArgs;

  Uint8List valueArgs;

  MyGATTCharacteristicWriteTypeArgs typeArgs;

  Object encode() {
    return <Object?>[
      idArgs,
      offsetArgs,
      valueArgs,
      typeArgs.index,
    ];
  }

  static MyGATTWriteRequestArgs decode(Object result) {
    result as List<Object?>;
    return MyGATTWriteRequestArgs(
      idArgs: result[0]! as int,
      offsetArgs: result[1]! as int,
      valueArgs: result[2]! as Uint8List,
      typeArgs: MyGATTCharacteristicWriteTypeArgs.values[result[3]! as int],
    );
  }
}

class _MyCentralManagerHostAPICodec extends StandardMessageCodec {
  const _MyCentralManagerHostAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MyGATTCharacteristicArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MyGATTDescriptorArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MyGATTServiceArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MyGATTCharacteristicArgs.decode(readValue(buffer)!);
      case 129: 
        return MyGATTDescriptorArgs.decode(readValue(buffer)!);
      case 130: 
        return MyGATTServiceArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MyCentralManagerHostAPI {
  /// Constructor for [MyCentralManagerHostAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MyCentralManagerHostAPI({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _MyCentralManagerHostAPICodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> initialize() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.initialize$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<MyBluetoothLowEnergyStateArgs> getState() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.getState$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return MyBluetoothLowEnergyStateArgs.values[__pigeon_replyList[0]! as int];
    }
  }

  Future<void> startDiscovery(List<String?> serviceUUIDsArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.startDiscovery$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[serviceUUIDsArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopDiscovery() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.stopDiscovery$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> connect(int addressArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.connect$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect(int addressArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.disconnect$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> getMTU(int addressArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.getMTU$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<List<MyGATTServiceArgs?>> getServices(int addressArgs, MyCacheModeArgs modeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.getServices$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, modeArgs.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<MyGATTServiceArgs?>();
    }
  }

  Future<List<MyGATTServiceArgs?>> getIncludedServices(int addressArgs, int handleArgs, MyCacheModeArgs modeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.getIncludedServices$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, handleArgs, modeArgs.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<MyGATTServiceArgs?>();
    }
  }

  Future<List<MyGATTCharacteristicArgs?>> getCharacteristics(int addressArgs, int handleArgs, MyCacheModeArgs modeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.getCharacteristics$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, handleArgs, modeArgs.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<MyGATTCharacteristicArgs?>();
    }
  }

  Future<List<MyGATTDescriptorArgs?>> getDescriptors(int addressArgs, int handleArgs, MyCacheModeArgs modeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.getDescriptors$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, handleArgs, modeArgs.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<MyGATTDescriptorArgs?>();
    }
  }

  Future<Uint8List> readCharacteristic(int addressArgs, int handleArgs, MyCacheModeArgs modeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.readCharacteristic$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, handleArgs, modeArgs.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeCharacteristic(int addressArgs, int handleArgs, Uint8List valueArgs, MyGATTCharacteristicWriteTypeArgs typeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.writeCharacteristic$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, handleArgs, valueArgs, typeArgs.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setCharacteristicNotifyState(int addressArgs, int handleArgs, MyGATTCharacteristicNotifyStateArgs stateArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.setCharacteristicNotifyState$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, handleArgs, stateArgs.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> readDescriptor(int addressArgs, int handleArgs, MyCacheModeArgs modeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.readDescriptor$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, handleArgs, modeArgs.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeDescriptor(int addressArgs, int handleArgs, Uint8List valueArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerHostAPI.writeDescriptor$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, handleArgs, valueArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _MyCentralManagerFlutterAPICodec extends StandardMessageCodec {
  const _MyCentralManagerFlutterAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MyAdvertisementArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MyGATTCharacteristicArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MyGATTDescriptorArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is MyManufacturerSpecificDataArgs) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is MyPeripheralArgs) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MyAdvertisementArgs.decode(readValue(buffer)!);
      case 129: 
        return MyGATTCharacteristicArgs.decode(readValue(buffer)!);
      case 130: 
        return MyGATTDescriptorArgs.decode(readValue(buffer)!);
      case 131: 
        return MyManufacturerSpecificDataArgs.decode(readValue(buffer)!);
      case 132: 
        return MyPeripheralArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class MyCentralManagerFlutterAPI {
  static const MessageCodec<Object?> pigeonChannelCodec = _MyCentralManagerFlutterAPICodec();

  void onStateChanged(MyBluetoothLowEnergyStateArgs stateArgs);

  void onDiscovered(MyPeripheralArgs peripheralArgs, int rssiArgs, int timestampArgs, MyAdvertisementTypeArgs typeArgs, MyAdvertisementArgs advertisementArgs);

  void onConnectionStateChanged(MyPeripheralArgs peripheralArgs, MyConnectionStateArgs stateArgs);

  void onMTUChanged(MyPeripheralArgs peripheralArgs, int mtuArgs);

  void onCharacteristicNotified(MyPeripheralArgs peripheralArgs, MyGATTCharacteristicArgs characteristicArgs, Uint8List valueArgs);

  static void setUp(MyCentralManagerFlutterAPI? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyBluetoothLowEnergyStateArgs? arg_stateArgs = args[0] == null ? null : MyBluetoothLowEnergyStateArgs.values[args[0]! as int];
          assert(arg_stateArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onStateChanged was null, expected non-null MyBluetoothLowEnergyStateArgs.');
          try {
            api.onStateChanged(arg_stateArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onDiscovered$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onDiscovered was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyPeripheralArgs? arg_peripheralArgs = (args[0] as MyPeripheralArgs?);
          assert(arg_peripheralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onDiscovered was null, expected non-null MyPeripheralArgs.');
          final int? arg_rssiArgs = (args[1] as int?);
          assert(arg_rssiArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onDiscovered was null, expected non-null int.');
          final int? arg_timestampArgs = (args[2] as int?);
          assert(arg_timestampArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onDiscovered was null, expected non-null int.');
          final MyAdvertisementTypeArgs? arg_typeArgs = args[3] == null ? null : MyAdvertisementTypeArgs.values[args[3]! as int];
          assert(arg_typeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onDiscovered was null, expected non-null MyAdvertisementTypeArgs.');
          final MyAdvertisementArgs? arg_advertisementArgs = (args[4] as MyAdvertisementArgs?);
          assert(arg_advertisementArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onDiscovered was null, expected non-null MyAdvertisementArgs.');
          try {
            api.onDiscovered(arg_peripheralArgs!, arg_rssiArgs!, arg_timestampArgs!, arg_typeArgs!, arg_advertisementArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onConnectionStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onConnectionStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyPeripheralArgs? arg_peripheralArgs = (args[0] as MyPeripheralArgs?);
          assert(arg_peripheralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onConnectionStateChanged was null, expected non-null MyPeripheralArgs.');
          final MyConnectionStateArgs? arg_stateArgs = args[1] == null ? null : MyConnectionStateArgs.values[args[1]! as int];
          assert(arg_stateArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onConnectionStateChanged was null, expected non-null MyConnectionStateArgs.');
          try {
            api.onConnectionStateChanged(arg_peripheralArgs!, arg_stateArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onMTUChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onMTUChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyPeripheralArgs? arg_peripheralArgs = (args[0] as MyPeripheralArgs?);
          assert(arg_peripheralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onMTUChanged was null, expected non-null MyPeripheralArgs.');
          final int? arg_mtuArgs = (args[1] as int?);
          assert(arg_mtuArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onMTUChanged was null, expected non-null int.');
          try {
            api.onMTUChanged(arg_peripheralArgs!, arg_mtuArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onCharacteristicNotified$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onCharacteristicNotified was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyPeripheralArgs? arg_peripheralArgs = (args[0] as MyPeripheralArgs?);
          assert(arg_peripheralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onCharacteristicNotified was null, expected non-null MyPeripheralArgs.');
          final MyGATTCharacteristicArgs? arg_characteristicArgs = (args[1] as MyGATTCharacteristicArgs?);
          assert(arg_characteristicArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onCharacteristicNotified was null, expected non-null MyGATTCharacteristicArgs.');
          final Uint8List? arg_valueArgs = (args[2] as Uint8List?);
          assert(arg_valueArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyCentralManagerFlutterAPI.onCharacteristicNotified was null, expected non-null Uint8List.');
          try {
            api.onCharacteristicNotified(arg_peripheralArgs!, arg_characteristicArgs!, arg_valueArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class _MyPeripheralManagerHostAPICodec extends StandardMessageCodec {
  const _MyPeripheralManagerHostAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MyAdvertisementArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MyManufacturerSpecificDataArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MyMutableGATTCharacteristicArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is MyMutableGATTDescriptorArgs) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is MyMutableGATTServiceArgs) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MyAdvertisementArgs.decode(readValue(buffer)!);
      case 129: 
        return MyManufacturerSpecificDataArgs.decode(readValue(buffer)!);
      case 130: 
        return MyMutableGATTCharacteristicArgs.decode(readValue(buffer)!);
      case 131: 
        return MyMutableGATTDescriptorArgs.decode(readValue(buffer)!);
      case 132: 
        return MyMutableGATTServiceArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class MyPeripheralManagerHostAPI {
  /// Constructor for [MyPeripheralManagerHostAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  MyPeripheralManagerHostAPI({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _MyPeripheralManagerHostAPICodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> initialize() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.initialize$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<MyBluetoothLowEnergyStateArgs> getState() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.getState$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return MyBluetoothLowEnergyStateArgs.values[__pigeon_replyList[0]! as int];
    }
  }

  Future<void> addService(MyMutableGATTServiceArgs serviceArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.addService$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[serviceArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeService(int hashCodeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.removeService$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[hashCodeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startAdvertising(MyAdvertisementArgs advertisementArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.startAdvertising$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[advertisementArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopAdvertising() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.stopAdvertising$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> getMaxNotificationSize(int addressArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.getMaxNotificationSize$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<void> respondReadRequestWithValue(int idArgs, Uint8List valueArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.respondReadRequestWithValue$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[idArgs, valueArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> respondReadRequestWithProtocolError(int idArgs, MyGATTProtocolErrorArgs errorArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.respondReadRequestWithProtocolError$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[idArgs, errorArgs.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> respondWriteRequest(int idArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.respondWriteRequest$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[idArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> respondWriteRequestWithProtocolError(int idArgs, MyGATTProtocolErrorArgs errorArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.respondWriteRequestWithProtocolError$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[idArgs, errorArgs.index]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> notifyValue(int addressArgs, int hashCodeArgs, Uint8List valueArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerHostAPI.notifyValue$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[addressArgs, hashCodeArgs, valueArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _MyPeripheralManagerFlutterAPICodec extends StandardMessageCodec {
  const _MyPeripheralManagerFlutterAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is MyCentralArgs) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is MyCentralArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is MyGATTReadRequestArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is MyGATTWriteRequestArgs) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return MyCentralArgs.decode(readValue(buffer)!);
      case 129: 
        return MyCentralArgs.decode(readValue(buffer)!);
      case 130: 
        return MyGATTReadRequestArgs.decode(readValue(buffer)!);
      case 131: 
        return MyGATTWriteRequestArgs.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class MyPeripheralManagerFlutterAPI {
  static const MessageCodec<Object?> pigeonChannelCodec = _MyPeripheralManagerFlutterAPICodec();

  void onStateChanged(MyBluetoothLowEnergyStateArgs stateArgs);

  void onMTUChanged(MyCentralArgs centralArgs, int mtuArgs);

  void onCharacteristicReadRequest(MyCentralArgs centralArgs, int hashCodeArgs, MyGATTReadRequestArgs requestArgs);

  void onCharacteristicWriteRequest(MyCentralArgs centralArgs, int hashCodeArgs, MyGATTWriteRequestArgs requestArgs);

  void onCharacteristicSubscribedClientsChanged(int hashCodeArgs, List<MyCentralArgs?> centralsArgs);

  void onDescriptorReadRequest(MyCentralArgs centralArgs, int hashCodeArgs, MyGATTReadRequestArgs requestArgs);

  void onDescriptorWriteRequest(MyCentralArgs centralArgs, int hashCodeArgs, MyGATTWriteRequestArgs requestArgs);

  static void setUp(MyPeripheralManagerFlutterAPI? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyBluetoothLowEnergyStateArgs? arg_stateArgs = args[0] == null ? null : MyBluetoothLowEnergyStateArgs.values[args[0]! as int];
          assert(arg_stateArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onStateChanged was null, expected non-null MyBluetoothLowEnergyStateArgs.');
          try {
            api.onStateChanged(arg_stateArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onMTUChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onMTUChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyCentralArgs? arg_centralArgs = (args[0] as MyCentralArgs?);
          assert(arg_centralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onMTUChanged was null, expected non-null MyCentralArgs.');
          final int? arg_mtuArgs = (args[1] as int?);
          assert(arg_mtuArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onMTUChanged was null, expected non-null int.');
          try {
            api.onMTUChanged(arg_centralArgs!, arg_mtuArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicReadRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicReadRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyCentralArgs? arg_centralArgs = (args[0] as MyCentralArgs?);
          assert(arg_centralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicReadRequest was null, expected non-null MyCentralArgs.');
          final int? arg_hashCodeArgs = (args[1] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicReadRequest was null, expected non-null int.');
          final MyGATTReadRequestArgs? arg_requestArgs = (args[2] as MyGATTReadRequestArgs?);
          assert(arg_requestArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicReadRequest was null, expected non-null MyGATTReadRequestArgs.');
          try {
            api.onCharacteristicReadRequest(arg_centralArgs!, arg_hashCodeArgs!, arg_requestArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicWriteRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicWriteRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyCentralArgs? arg_centralArgs = (args[0] as MyCentralArgs?);
          assert(arg_centralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicWriteRequest was null, expected non-null MyCentralArgs.');
          final int? arg_hashCodeArgs = (args[1] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicWriteRequest was null, expected non-null int.');
          final MyGATTWriteRequestArgs? arg_requestArgs = (args[2] as MyGATTWriteRequestArgs?);
          assert(arg_requestArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicWriteRequest was null, expected non-null MyGATTWriteRequestArgs.');
          try {
            api.onCharacteristicWriteRequest(arg_centralArgs!, arg_hashCodeArgs!, arg_requestArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicSubscribedClientsChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicSubscribedClientsChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_hashCodeArgs = (args[0] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicSubscribedClientsChanged was null, expected non-null int.');
          final List<MyCentralArgs?>? arg_centralsArgs = (args[1] as List<Object?>?)?.cast<MyCentralArgs?>();
          assert(arg_centralsArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onCharacteristicSubscribedClientsChanged was null, expected non-null List<MyCentralArgs?>.');
          try {
            api.onCharacteristicSubscribedClientsChanged(arg_hashCodeArgs!, arg_centralsArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onDescriptorReadRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onDescriptorReadRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyCentralArgs? arg_centralArgs = (args[0] as MyCentralArgs?);
          assert(arg_centralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onDescriptorReadRequest was null, expected non-null MyCentralArgs.');
          final int? arg_hashCodeArgs = (args[1] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onDescriptorReadRequest was null, expected non-null int.');
          final MyGATTReadRequestArgs? arg_requestArgs = (args[2] as MyGATTReadRequestArgs?);
          assert(arg_requestArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onDescriptorReadRequest was null, expected non-null MyGATTReadRequestArgs.');
          try {
            api.onDescriptorReadRequest(arg_centralArgs!, arg_hashCodeArgs!, arg_requestArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onDescriptorWriteRequest$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onDescriptorWriteRequest was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final MyCentralArgs? arg_centralArgs = (args[0] as MyCentralArgs?);
          assert(arg_centralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onDescriptorWriteRequest was null, expected non-null MyCentralArgs.');
          final int? arg_hashCodeArgs = (args[1] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onDescriptorWriteRequest was null, expected non-null int.');
          final MyGATTWriteRequestArgs? arg_requestArgs = (args[2] as MyGATTWriteRequestArgs?);
          assert(arg_requestArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_windows.MyPeripheralManagerFlutterAPI.onDescriptorWriteRequest was null, expected non-null MyGATTWriteRequestArgs.');
          try {
            api.onDescriptorWriteRequest(arg_centralArgs!, arg_hashCodeArgs!, arg_requestArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
