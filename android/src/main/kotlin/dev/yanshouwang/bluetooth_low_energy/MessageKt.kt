//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: message.proto

package dev.yanshouwang.bluetooth_low_energy;

@kotlin.jvm.JvmSynthetic
inline fun message(block: dev.yanshouwang.bluetooth_low_energy.MessageKt.Dsl.() -> Unit): dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.Message =
  dev.yanshouwang.bluetooth_low_energy.MessageKt.Dsl._create(dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.Message.newBuilder()).apply { block() }._build()
object MessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.Message.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.Message.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.Message = _builder.build()

    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.MessageCategory category = 1;</code>
     */
    var category: dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.MessageCategory
      @JvmName("getCategory")
      get() = _builder.getCategory()
      @JvmName("setCategory")
      set(value) {
        _builder.setCategory(value)
      }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.MessageCategory category = 1;</code>
     */
    fun clearCategory() {
      _builder.clearCategory()
    }

    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.BluetoothState state = 2;</code>
     */
    var state: dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.BluetoothState
      @JvmName("getState")
      get() = _builder.getState()
      @JvmName("setState")
      set(value) {
        _builder.setState(value)
      }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.BluetoothState state = 2;</code>
     */
    fun clearState() {
      _builder.clearState()
    }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.BluetoothState state = 2;</code>
     * @return Whether the state field is set.
     */
    fun hasState(): kotlin.Boolean {
      return _builder.hasState()
    }

    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.Discovery discovery = 3;</code>
     */
    var discovery: dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.Discovery
      @JvmName("getDiscovery")
      get() = _builder.getDiscovery()
      @JvmName("setDiscovery")
      set(value) {
        _builder.setDiscovery(value)
      }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.Discovery discovery = 3;</code>
     */
    fun clearDiscovery() {
      _builder.clearDiscovery()
    }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.Discovery discovery = 3;</code>
     * @return Whether the discovery field is set.
     */
    fun hasDiscovery(): kotlin.Boolean {
      return _builder.hasDiscovery()
    }

    /**
     * <code>bool scanning = 4;</code>
     */
    var scanning: kotlin.Boolean
      @JvmName("getScanning")
      get() = _builder.getScanning()
      @JvmName("setScanning")
      set(value) {
        _builder.setScanning(value)
      }
    /**
     * <code>bool scanning = 4;</code>
     */
    fun clearScanning() {
      _builder.clearScanning()
    }
    /**
     * <code>bool scanning = 4;</code>
     * @return Whether the scanning field is set.
     */
    fun hasScanning(): kotlin.Boolean {
      return _builder.hasScanning()
    }

    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.ConnectionLostEvent connectionLostEvent = 5;</code>
     */
    var connectionLostEvent: dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.ConnectionLostEvent
      @JvmName("getConnectionLostEvent")
      get() = _builder.getConnectionLostEvent()
      @JvmName("setConnectionLostEvent")
      set(value) {
        _builder.setConnectionLostEvent(value)
      }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.ConnectionLostEvent connectionLostEvent = 5;</code>
     */
    fun clearConnectionLostEvent() {
      _builder.clearConnectionLostEvent()
    }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.ConnectionLostEvent connectionLostEvent = 5;</code>
     * @return Whether the connectionLostEvent field is set.
     */
    fun hasConnectionLostEvent(): kotlin.Boolean {
      return _builder.hasConnectionLostEvent()
    }

    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.GattCharacteristicNotifyEvent notifyEvent = 6;</code>
     */
    var notifyEvent: dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.GattCharacteristicNotifyEvent
      @JvmName("getNotifyEvent")
      get() = _builder.getNotifyEvent()
      @JvmName("setNotifyEvent")
      set(value) {
        _builder.setNotifyEvent(value)
      }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.GattCharacteristicNotifyEvent notifyEvent = 6;</code>
     */
    fun clearNotifyEvent() {
      _builder.clearNotifyEvent()
    }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.GattCharacteristicNotifyEvent notifyEvent = 6;</code>
     * @return Whether the notifyEvent field is set.
     */
    fun hasNotifyEvent(): kotlin.Boolean {
      return _builder.hasNotifyEvent()
    }
    val valueCase: dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.Message.ValueCase
      @JvmName("getValueCase")
      get() = _builder.getValueCase()

    fun clearValue() {
      _builder.clearValue()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.Message.copy(block: dev.yanshouwang.bluetooth_low_energy.MessageKt.Dsl.() -> Unit): dev.yanshouwang.bluetooth_low_energy.MessageOuterClass.Message =
  dev.yanshouwang.bluetooth_low_energy.MessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()
