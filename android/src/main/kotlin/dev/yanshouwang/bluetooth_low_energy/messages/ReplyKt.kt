//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: messages.proto

package dev.yanshouwang.bluetooth_low_energy.messages;

@kotlin.jvm.JvmSynthetic
public inline fun reply(block: dev.yanshouwang.bluetooth_low_energy.messages.ReplyKt.Dsl.() -> kotlin.Unit): dev.yanshouwang.bluetooth_low_energy.messages.Messages.Reply =
  dev.yanshouwang.bluetooth_low_energy.messages.ReplyKt.Dsl._create(dev.yanshouwang.bluetooth_low_energy.messages.Messages.Reply.newBuilder()).apply { block() }._build()
public object ReplyKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: dev.yanshouwang.bluetooth_low_energy.messages.Messages.Reply.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: dev.yanshouwang.bluetooth_low_energy.messages.Messages.Reply.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): dev.yanshouwang.bluetooth_low_energy.messages.Messages.Reply = _builder.build()

    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.BluetoothGetStateReplyArguments bluetooth_get_state_arguments = 1;</code>
     */
    public var bluetoothGetStateArguments: dev.yanshouwang.bluetooth_low_energy.messages.Messages.BluetoothGetStateReplyArguments
      @JvmName("getBluetoothGetStateArguments")
      get() = _builder.getBluetoothGetStateArguments()
      @JvmName("setBluetoothGetStateArguments")
      set(value) {
        _builder.setBluetoothGetStateArguments(value)
      }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.BluetoothGetStateReplyArguments bluetooth_get_state_arguments = 1;</code>
     */
    public fun clearBluetoothGetStateArguments() {
      _builder.clearBluetoothGetStateArguments()
    }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.BluetoothGetStateReplyArguments bluetooth_get_state_arguments = 1;</code>
     * @return Whether the bluetoothGetStateArguments field is set.
     */
    public fun hasBluetoothGetStateArguments(): kotlin.Boolean {
      return _builder.hasBluetoothGetStateArguments()
    }

    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.CentralConnectReplyArguments central_connect_arguments = 2;</code>
     */
    public var centralConnectArguments: dev.yanshouwang.bluetooth_low_energy.messages.Messages.CentralConnectReplyArguments
      @JvmName("getCentralConnectArguments")
      get() = _builder.getCentralConnectArguments()
      @JvmName("setCentralConnectArguments")
      set(value) {
        _builder.setCentralConnectArguments(value)
      }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.CentralConnectReplyArguments central_connect_arguments = 2;</code>
     */
    public fun clearCentralConnectArguments() {
      _builder.clearCentralConnectArguments()
    }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.CentralConnectReplyArguments central_connect_arguments = 2;</code>
     * @return Whether the centralConnectArguments field is set.
     */
    public fun hasCentralConnectArguments(): kotlin.Boolean {
      return _builder.hasCentralConnectArguments()
    }

    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.CharacteristicReadReplyArguments characteristic_read_arguments = 3;</code>
     */
    public var characteristicReadArguments: dev.yanshouwang.bluetooth_low_energy.messages.Messages.CharacteristicReadReplyArguments
      @JvmName("getCharacteristicReadArguments")
      get() = _builder.getCharacteristicReadArguments()
      @JvmName("setCharacteristicReadArguments")
      set(value) {
        _builder.setCharacteristicReadArguments(value)
      }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.CharacteristicReadReplyArguments characteristic_read_arguments = 3;</code>
     */
    public fun clearCharacteristicReadArguments() {
      _builder.clearCharacteristicReadArguments()
    }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.CharacteristicReadReplyArguments characteristic_read_arguments = 3;</code>
     * @return Whether the characteristicReadArguments field is set.
     */
    public fun hasCharacteristicReadArguments(): kotlin.Boolean {
      return _builder.hasCharacteristicReadArguments()
    }

    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.DescriptorReadReplyArguments descriptor_read_arguments = 4;</code>
     */
    public var descriptorReadArguments: dev.yanshouwang.bluetooth_low_energy.messages.Messages.DescriptorReadReplyArguments
      @JvmName("getDescriptorReadArguments")
      get() = _builder.getDescriptorReadArguments()
      @JvmName("setDescriptorReadArguments")
      set(value) {
        _builder.setDescriptorReadArguments(value)
      }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.DescriptorReadReplyArguments descriptor_read_arguments = 4;</code>
     */
    public fun clearDescriptorReadArguments() {
      _builder.clearDescriptorReadArguments()
    }
    /**
     * <code>.dev.yanshouwang.bluetooth_low_energy.messages.DescriptorReadReplyArguments descriptor_read_arguments = 4;</code>
     * @return Whether the descriptorReadArguments field is set.
     */
    public fun hasDescriptorReadArguments(): kotlin.Boolean {
      return _builder.hasDescriptorReadArguments()
    }
    public val argumentsCase: dev.yanshouwang.bluetooth_low_energy.messages.Messages.Reply.ArgumentsCase
      @JvmName("getArgumentsCase")
      get() = _builder.getArgumentsCase()

    public fun clearArguments() {
      _builder.clearArguments()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun dev.yanshouwang.bluetooth_low_energy.messages.Messages.Reply.copy(block: dev.yanshouwang.bluetooth_low_energy.messages.ReplyKt.Dsl.() -> kotlin.Unit): dev.yanshouwang.bluetooth_low_energy.messages.Messages.Reply =
  dev.yanshouwang.bluetooth_low_energy.messages.ReplyKt.Dsl._create(this.toBuilder()).apply { block() }._build()
